{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery-master/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"1a029a492861cf92cd5f267fadd2322bb7f9c70d","modified":1603440099030},{"_id":"source/_posts/理解 JavaScript 的 async&await.md","hash":"af0667041245e7437d25c3d832aff57b9a3c80f6","modified":1605228553088},{"_id":"source/about/index.md","hash":"9105689fa67a906e190688bdbee17b211677fbe6","modified":1603440099035},{"_id":"source/categories/index.md","hash":"6b6ac2b912947667f3e6ec4091975f7d343e2818","modified":1603440099037},{"_id":"source/contact/index.md","hash":"8055bf0d0de9a37f5ab589d2a00d5bcb8f0099cb","modified":1603440099039},{"_id":"source/tags/index.md","hash":"c04e8cf7ca8aa9a79c958b427bce614c17e39691","modified":1603440099042},{"_id":"source/_posts/一篇来自2018年4月17日的Git笔记.md","hash":"bba50ae2032db23c1005622e3ef142d0b56dd51a","modified":1604892623998},{"_id":"source/_posts/这个Blog还有我.md","hash":"d439704d8e6e9f8c671c76d6a20303d5bfe4edd3","modified":1604968993687},{"_id":"source/_posts/使用CSDN-markdown编辑器.md","hash":"1373c0c5db2a4ccdd757e413eb183a05d2d96476","modified":1604734149539},{"_id":"themes/hexo-theme-matery-master/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1603440099045},{"_id":"themes/hexo-theme-matery-master/_config.yml","hash":"04d3a3038a26ffde8d6213b3485d4b242be687ff","modified":1604732909449},{"_id":"themes/hexo-theme-matery-master/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1603440099054},{"_id":"themes/hexo-theme-matery-master/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1603440099055},{"_id":"themes/hexo-theme-matery-master/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1603440099057},{"_id":"themes/hexo-theme-matery-master/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1603440099152},{"_id":"themes/hexo-theme-matery-master/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1603440099059},{"_id":"themes/hexo-theme-matery-master/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1603440099128},{"_id":"themes/hexo-theme-matery-master/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1603440099129},{"_id":"themes/hexo-theme-matery-master/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1603440099130},{"_id":"themes/hexo-theme-matery-master/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1603440099132},{"_id":"themes/hexo-theme-matery-master/layout/friends.ejs","hash":"e9716a948172e6ad46c18cc7e78770cdc46f1857","modified":1603440099135},{"_id":"themes/hexo-theme-matery-master/layout/index.ejs","hash":"3cabb8e3680858c1412277def37bdef73981be0f","modified":1603440099137},{"_id":"themes/hexo-theme-matery-master/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1603440099046},{"_id":"themes/hexo-theme-matery-master/layout/layout.ejs","hash":"e179c72cb4eef88e5168cadafa2e1c3b46fd1486","modified":1603440099138},{"_id":"themes/hexo-theme-matery-master/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1603440099141},{"_id":"themes/hexo-theme-matery-master/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1603440099140},{"_id":"themes/hexo-theme-matery-master/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1603440099134},{"_id":"themes/hexo-theme-matery-master/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1603440099143},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","hash":"cfc146a8fcc3efef02cdaf7d59b4a5781235392d","modified":1603440099148},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1603440099151},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","hash":"b4e7a09c79aecaa859032a7f39c25d2f6692e75a","modified":1603441088246},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1603440099154},{"_id":"themes/hexo-theme-matery-master/README_CN.md","hash":"938e40cfb109501bf487c808e5670db3011431b9","modified":1603440099049},{"_id":"themes/hexo-theme-matery-master/README.md","hash":"bbc201f264ea3fca4ec3738728d4236626cd698a","modified":1603440099048},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1603440099149},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1603440099146},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1603440099465},{"_id":"themes/hexo-theme-matery-master/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1603440099062},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1603440099063},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1603440099064},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1603440099066},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1603440099068},{"_id":"themes/hexo-theme-matery-master/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1603440099069},{"_id":"themes/hexo-theme-matery-master/layout/_partial/footer.ejs","hash":"78228c5e91fc2e6fed6949d971bf78a1f5081812","modified":1603440099071},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1603440099072},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1603440099354},{"_id":"themes/hexo-theme-matery-master/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1603440099073},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1603440099075},{"_id":"themes/hexo-theme-matery-master/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1603440099076},{"_id":"themes/hexo-theme-matery-master/layout/_partial/head.ejs","hash":"adaeca6ae9064c41047c3fb4f8bd046b736ae457","modified":1603440099078},{"_id":"themes/hexo-theme-matery-master/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1603440099083},{"_id":"themes/hexo-theme-matery-master/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1603440099084},{"_id":"themes/hexo-theme-matery-master/layout/_partial/index-cover.ejs","hash":"6dc2522bc03b65d0b421a643b21a78a59c8213c1","modified":1603440099081},{"_id":"themes/hexo-theme-matery-master/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1603440099087},{"_id":"themes/hexo-theme-matery-master/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1603440099085},{"_id":"themes/hexo-theme-matery-master/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1603440099089},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1603440099090},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1603440099387},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail-toc.ejs","hash":"ea50a5669847740894d5737a6330bf1013ae2e65","modified":1603440099091},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1603440099094},{"_id":"themes/hexo-theme-matery-master/layout/_partial/prev-next.ejs","hash":"908ddab5b5d5662c50b46ada0e03e06fe0a6c310","modified":1603440099096},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail.ejs","hash":"8ad8a7ec3f6438af496c51fd6bef1684e158a9ef","modified":1603440099093},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1603440099097},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1603440099099},{"_id":"themes/hexo-theme-matery-master/layout/_partial/search.ejs","hash":"c5f1a2de30363f370c8c37994140d6ef4fd0c4b7","modified":1603440099101},{"_id":"themes/hexo-theme-matery-master/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1603440099080},{"_id":"themes/hexo-theme-matery-master/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1603440099102},{"_id":"themes/hexo-theme-matery-master/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1603440099103},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1603440099107},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1603440099109},{"_id":"themes/hexo-theme-matery-master/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1603440099110},{"_id":"themes/hexo-theme-matery-master/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1603440099105},{"_id":"themes/hexo-theme-matery-master/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1603440099112},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1603440099113},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1603440099114},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1603440099464},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1603440099117},{"_id":"themes/hexo-theme-matery-master/layout/_widget/recommend.ejs","hash":"ba6f8992c44cd44585af25a283c09403b4fc0aca","modified":1603440099121},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1603440099124},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1603440099119},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1603440099122},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1603440099116},{"_id":"themes/hexo-theme-matery-master/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1603440099126},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1603440099401},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1603440099410},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1603440099417},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1603440099419},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1603440099443},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1603440099446},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1603440099441},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1603440099431},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1603440099438},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1603440099451},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1603440099459},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1603440099457},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1603440099158},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1603440099161},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1603440099163},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1603440099468},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1603440099470},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1603440099164},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1603440099236},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1603440099166},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1603440099238},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1603440099245},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1603440099250},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1603440099251},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1603440099254},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1603440099248},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1603440099242},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1603440099243},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1603440099256},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1603440099270},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1603440099286},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1603440099280},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1603440099315},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1603440099326},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1603440099288},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1603440099344},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1603440099345},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1603440099322},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1603440099290},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1603440099324},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1603440099195},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1603440099203},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1603440099202},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1603440099295},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1603440099200},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1603440099299},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1603440099312},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1603440099301},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1603440099329},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1603440099302},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1603440099306},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1603440099298},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1603440099309},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1603440099332},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1603440099341},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1603440099334},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1603440099308},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1603440099336},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1603440099395},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1603440099399},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1603440099404},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1603440099339},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1603440099408},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1603440099426},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1603440099414},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1603440099422},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1603440099428},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1603440099435},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1603440099449},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1603440099454},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1603440099305},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1603440099461},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1603440099358},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1603440099371},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1603440099366},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1603440099335},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1603440099293},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1603440099258},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1603440099282},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1603440099170},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1603440099349},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1603440099193},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1603440099187},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1603440099190},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1603440099175},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1603440099234},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1603440099227},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1603440099391},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1603440099381},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1603440099278},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1603440099317},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1603440099320},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1603440099352},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1603440099198},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1603440099363},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1603440099385},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1603440099209},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1603440099377},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1603440099224},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1603440099183},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1603440099268},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1603440099219},{"_id":"public/search.xml","hash":"94f7ecdab0e77bbc50768d279772e2fc933ffd91","modified":1605228608529},{"_id":"public/404.html","hash":"b868251ea9be7198af0188c4323a42f534edb2ac","modified":1605228608529},{"_id":"public/categories/index.html","hash":"e1bf20c0b74c9f3393bcdfb184e8f380c78f487f","modified":1605228608529},{"_id":"public/contact/index.html","hash":"cffeb06757898783a4b2af5d5e1d51ea1454dd00","modified":1605228608529},{"_id":"public/about/index.html","hash":"6a2e540c5aec56084ab47f37dd2ecb180e76d0c2","modified":1605228608529},{"_id":"public/tags/index.html","hash":"83cb88bfb1efde1268053dea9c1e3f1c70f6a011","modified":1605228608529},{"_id":"public/2020/11/13/理解 JavaScript 的 async&await/index.html","hash":"9a28a0b8a700981d23e3ebc645fbeaeab0f0e3ef","modified":1605228608529},{"_id":"public/2020/11/09/一篇来自2018年4月17日的Git笔记/index.html","hash":"e8b0f4042117c5ba272a283c3ffe79426c19b34a","modified":1605228608529},{"_id":"public/2020/11/07/这个Blog还有我/index.html","hash":"be74ce71cc1d77d2e1cfea4decb81dc31ac51f26","modified":1605228608529},{"_id":"public/2020/10/22/使用CSDN-markdown编辑器/index.html","hash":"837f205650f3ea981c0f84281524cf1822058864","modified":1605228608529},{"_id":"public/archives/index.html","hash":"cb5f3602f5f9ba9630dc3a410ab0b6299971dd96","modified":1605228608529},{"_id":"public/archives/2020/index.html","hash":"046a58e450401eaa19b6cc4a7a0e36d011c4de59","modified":1605228608529},{"_id":"public/archives/2020/10/index.html","hash":"84f6256b4f455a4f95f280c01a8c552774603b7b","modified":1605228608529},{"_id":"public/archives/2020/11/index.html","hash":"02487fc68cd59894722f24251a060bb0c3fe3067","modified":1605228608529},{"_id":"public/categories/Git/index.html","hash":"b0c3dc4c1917a2d42277b5548bbade064b3dba45","modified":1605228608529},{"_id":"public/categories/技术/index.html","hash":"a5b967b5cd18b254c812ac49c5694088800456d5","modified":1605228608529},{"_id":"public/categories/Markdown/index.html","hash":"3d004792a5c3ce37baba0aae0be69927e7de6b2f","modified":1605228608529},{"_id":"public/categories/致来访者/index.html","hash":"d16fa5598a21ba7fd94f9440d84b2eb663499f04","modified":1605228608529},{"_id":"public/index.html","hash":"3b7fcf9c934eb6608c0def0b0c54cac8ef75643a","modified":1605228608529},{"_id":"public/tags/Git/index.html","hash":"8249a66be5e7fcc573f85b31a2be3e00dbfd4fab","modified":1605228608529},{"_id":"public/tags/JavaScript/index.html","hash":"8d9a53fb2eb2ae324a63be2349c21c734ba3941b","modified":1605228608529},{"_id":"public/tags/转载/index.html","hash":"1635475bb062803607bc33a79975c1f2bd8b8449","modified":1605228608529},{"_id":"public/tags/Typora/index.html","hash":"5cdfdbe82f26a560b3e716167bd75cdc30dfcd45","modified":1605228608529},{"_id":"public/tags/Markdown/index.html","hash":"4c171c020bfcd2571ab9c102c90ec026285b608a","modified":1605228608529},{"_id":"public/tags/个人简介/index.html","hash":"086a8c6c90d93a1abd8579ecaa525afe2dcab326","modified":1605228608529},{"_id":"public/tags/博客简介/index.html","hash":"ea87a7d24feef691355c14c262839305be0d4f5a","modified":1605228608529},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1605228608529},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1605228608529},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1605228608529},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1605228608529},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1605228608529},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1605228608529},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1605228608529},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1605228608529},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1605228608529},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1605228608529},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1605228608529},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1605228608529},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1605228608529},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1605228608529},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1605228608529},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1605228608529},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1605228608529},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1605228608529},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1605228608529},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1605228608529},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1605228608529},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1605228608529},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1605228608529},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1605228608529},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1605228608529},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1605228608529},{"_id":"public/css/prism-tomorrow.css","hash":"733208631ad1ebf0ba27f7e6f02eb11414d4e284","modified":1605228608529},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1605228608529},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1605228608529},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1605228608529},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1605228608529},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1605228608529},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1605228608529},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1605228608529},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1605228608529},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1605228608529},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1605228608529},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1605228608529},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1605228608529},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1605228608529},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1605228608529},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1605228608529},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1605228608529},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1605228608529},{"_id":"public/js/search.js","hash":"f49c329e6b1f98a228426876356c945e8dce7e8e","modified":1605228608529},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1605228608529},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1605228608529},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1605228608529},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1605228608529},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1605228608529},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1605228608529},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1605228608529},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1605228608529},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1605228608529},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1605228608529},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1605228608529},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1605228608529},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1605228608529},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1605228608529},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1605228608529},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1605228608529},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1605228608529},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1605228608529},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1605228608529},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1605228608529},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1605228608529},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1605228608529},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1605228608529},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1605228608529},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1605228608529},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1605228608529},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1605228608529},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1605228608529},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1605228608529},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1605228608529},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1605228608529},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1605228608529},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1605228608529},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1605228608529},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1605228608529},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1605228608529},{"_id":"public/css/matery.css","hash":"87bd1dacf48c9daab7ea43466368247f1e4107d1","modified":1605228608529},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1605228608529},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1605228608529},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1605228608529},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1605228608529},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1605228608529},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1605228608529},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1605228608529},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1605228608529},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1605228608529},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1605228608529},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1605228608529},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1605228608529},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1605228608529},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1605228608529},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1605228608529},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1605228608529},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1605228608529},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1605228608529}],"Category":[{"name":"Git","_id":"ckhfjo27j000488r45jgda0vt"},{"name":"技术","_id":"ckhfjo27n000a88r49mjvgdua"},{"name":"Markdown","_id":"ckhfjo27o000e88r41arpf7td"},{"name":"致来访者","_id":"ckhfjo27z000p88r4b6tzdkty"}],"Data":[],"Page":[{"title":"about","date":"2020-10-22T08:42:02.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-10-22 16:42:02\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2020-10-23T08:01:39.035Z","path":"about/index.html","comments":1,"_id":"ckhfjo279000088r4d3yj46kw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2020-10-22T08:47:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2020-10-22 16:47:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2020-10-23T08:01:39.030Z","path":"404.html","comments":1,"_id":"ckhfjo27g000288r4acosdbs8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-10-22T08:35:24.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-10-22 16:35:24\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-10-23T08:01:39.037Z","path":"categories/index.html","comments":1,"_id":"ckhfjo27l000688r41lwr6c87","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2020-10-22T08:44:33.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-10-22 16:44:33\ntype: \"contact\"\nlayout: \"contact\"\n---","updated":"2020-10-23T08:01:39.039Z","path":"contact/index.html","comments":1,"_id":"ckhfjo27m000888r4fhlsbg4h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-10-22T08:41:08.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-10-22 16:41:08\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-10-23T08:01:39.042Z","path":"tags/index.html","comments":1,"_id":"ckhfjo27n000988r4446a71vr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"一篇来自2018年4月17日的Git笔记","date":"2020-11-09T04:27:22.000Z","author":"heyXiao","summary":"一些比较常用的Git指令","cover":true,"_content":"\n## GIT\n\n### 命令行窗口\n- 我们平时使用计算机都是通过可视化的界面来对电脑发送命令\n    + 鼠标右键->新建->新建文件夹\n- 命令行窗口也是一种可以向计算机发送命令的途径\n    + 通过命令的形式告诉计算机我们要做什么\n    + mkdir 文件夹的名字\n- 开启命令行\n    + win + R -> cmd -> enter\n- 常用命令行工具\n    + cmd\n    + powershell\n    + git bash\n\n### 常用命令\n- pwd (print working directory) 查看当前所在的目录\n- cd (change directory) 切换目录\n- ls (list) 查看当前目录下的内容(有兼容问题 可以用dir)\n- clear 清屏（有兼容问题  可以用cls）\n- mkdir (make directory) 创建目录\n- touch 创建文件（有兼容问题 可以用 type nul>文件名）\n- cat 查看文件内容 一次性将所有内容输出\n- less 查看文件内容 每一次查看部分文件内容\n    + 回车 一次向下走一行\n    + 空格 一次向下走一页\n    + b（back）    一次向上走一页\n    + q（quit）    退出\n- rm (remove) 删除文件 如 rm index.html、rm -rf blog（删除有内容的文件夹）\n- rmdir (remove directory) 删除文件夹 只能删除空文件夹 不常用\n- mv (move) 移动文件或重命名\n- cp (copy) 复制文件\n- echo '内容' > 文件 输出内容到文件 每次输出都是覆盖原有文件内容\n- ehco '内容' >> 文件 输出内容到文件 每次输出都是追新内容\n- 命令的基本组成部分\n    + rm(删除命令) -rf(选项)\n\n### GIT是什么\n- 版本控制工具\n    + 例子：\n        * 人事专员管理职工信息\n        * 项目功能变更导致的问题\n        * 多人开发一个项目 代码共享时的问题\n\n### GIT三大区域\n- 工作目录\n    + 存放项目代码的目录\n- 暂存区\n    + 临时存放更改的了文件\n    + 防止工作目录中的代码丢失\n- 代码仓库\n    + 当开发的功能足以形成一个版本的时候 可以将代码形成版本提交到仓库\n    + 相当于复制了一份当前的代码存储到了仓库中\n\n### GIT常用命令\n- 配置git用户名和邮箱\n    + git config --global user.name zhangsan\n    + git config --global user.email demotest123@163.com\n- 查看当前的git配置\n    + git config --list\n- 初始化git仓库\n    + git init\n- 查看当前仓库的状态 \n    + git status\n- 将工作目录中的文件添加到暂存区\n    + git add\n- 将暂存区中的代码提交到本地仓库 形成一个版本\n    + git commit -m 备注 \n- 查看本地仓库中的历史提交版本\n    + git log \n- 将暂存区中的文件恢复到工作目录\n    + git rm --cached 文件列表 \n    + 说明:\n        * 必须保证工作目录中的代码和暂存区中的代码一致\n        * 此时工作目录中有此文件 暂存区中没有此文件 这个文件不被git管理\n- 用暂存区中的文件覆盖工作目录中的文件\n    + git checkout -- 文件列表\n    + 说明：暂存区和工作目录都有此文件 这个文件依然被git管理\n- 回滚到本地仓库中的特定版本并覆盖暂存区和工作目录\n    + git reset --hard commitID\n- 查看分支\n    + git branch\n- 创建分支\n    + git branch 分支名称\n- 切换分支\n    + git checkout 分支名称\n- 创建并切换分支\n    + git checkout -b 分支名称 \n- 删除分支(如果分支没有被合并不允许删除)\n    + git branch -d 分支名称\n- 删除分支(强制删除分支)\n    + git branch -D 分支名称\n- 合并分支\n    + git merge 来源分支\n- 初始化一个裸露仓库(公共代码仓库)\n    + git init --bare \n- 向远程仓库推送代码\n    + git push 远程仓库地址 本地分支名称:远程分支名称\n- 从远程仓库中拉取代码(拉取最新版本到本地 开发过程中使用)\n    + git pull 远程仓库地址 远程分支名称:本地分支名称\n- 为远程仓库地址创建别名\n    + git remote add 别名 远程仓库地址\n- 查看远程地址的详情信息\n    + git remote -v\n- 查看当前别名所对应的远程仓库地址\n    + git remote show 别名 \n- 删除当前别名及所对应的远程仓库地址\n    + git remote remove 别名 \n- 从远程仓库获取代码(拉取所有版本到本地)\n    + git clone 远程仓库地址 项目名称\n    + 使用场景：加入到已有项目的开发中 需要先拉取所有版本到本地 再进行开发\n- 冲突修复\n    + 模拟冲突\n        * 张三和李四分别克隆代码到本地\n        * 张三改了demo文件并提交到远端仓库\n        * 李四也改了同一个文件\n        * 这时因为张三已经提交了一版代码到远程仓库\n        * 远程仓库的代码要比李四本地的代码新\n        * 所以李四不能直接向远程仓库推送代码\n        * 要先拉去再推送\n        * 此时因为张三和李四改了同一个文件所以产生了冲突\n        * 李四解决冲突并再次提交代码到远程仓库\n- 多人协作开发免登录操作\n    + ssh-keygen\n\n### git使用流程\n-   1.配置账户信息\n    + git config --global user.name 用户名\n    + git config --global user.email 邮箱地址\n    + git config --list 查看当前的git配置\n-   2.初始化本地仓库\n    + git init\n-   3.查看本地仓库的状态\n    + git status\n-   4.将工作目录中的文件提交到暂存区\n    + git add 文件列表\n    + git add . 添加工作目录中所有的文件到暂存区\n-   1. 将暂存区中的代码提交到本地仓库\n    + git commit -m 备注\n    + git commit -m \"first commit\"\n\n### git 忽略清单\n- .gitignore文件","source":"_posts/一篇来自2018年4月17日的Git笔记.md","raw":"---\ntitle: 一篇来自2018年4月17日的Git笔记\ndate: 2020-11-09 12:27:22\nauthor: heyXiao\n# password: 35482c55c9fcbe4ff1b6023476c7acd59c011b9e8870376a45b3416ba8092d3d\nsummary: 一些比较常用的Git指令\ncategories: Git\ntags:\n  - Git\ncover: true\n---\n\n## GIT\n\n### 命令行窗口\n- 我们平时使用计算机都是通过可视化的界面来对电脑发送命令\n    + 鼠标右键->新建->新建文件夹\n- 命令行窗口也是一种可以向计算机发送命令的途径\n    + 通过命令的形式告诉计算机我们要做什么\n    + mkdir 文件夹的名字\n- 开启命令行\n    + win + R -> cmd -> enter\n- 常用命令行工具\n    + cmd\n    + powershell\n    + git bash\n\n### 常用命令\n- pwd (print working directory) 查看当前所在的目录\n- cd (change directory) 切换目录\n- ls (list) 查看当前目录下的内容(有兼容问题 可以用dir)\n- clear 清屏（有兼容问题  可以用cls）\n- mkdir (make directory) 创建目录\n- touch 创建文件（有兼容问题 可以用 type nul>文件名）\n- cat 查看文件内容 一次性将所有内容输出\n- less 查看文件内容 每一次查看部分文件内容\n    + 回车 一次向下走一行\n    + 空格 一次向下走一页\n    + b（back）    一次向上走一页\n    + q（quit）    退出\n- rm (remove) 删除文件 如 rm index.html、rm -rf blog（删除有内容的文件夹）\n- rmdir (remove directory) 删除文件夹 只能删除空文件夹 不常用\n- mv (move) 移动文件或重命名\n- cp (copy) 复制文件\n- echo '内容' > 文件 输出内容到文件 每次输出都是覆盖原有文件内容\n- ehco '内容' >> 文件 输出内容到文件 每次输出都是追新内容\n- 命令的基本组成部分\n    + rm(删除命令) -rf(选项)\n\n### GIT是什么\n- 版本控制工具\n    + 例子：\n        * 人事专员管理职工信息\n        * 项目功能变更导致的问题\n        * 多人开发一个项目 代码共享时的问题\n\n### GIT三大区域\n- 工作目录\n    + 存放项目代码的目录\n- 暂存区\n    + 临时存放更改的了文件\n    + 防止工作目录中的代码丢失\n- 代码仓库\n    + 当开发的功能足以形成一个版本的时候 可以将代码形成版本提交到仓库\n    + 相当于复制了一份当前的代码存储到了仓库中\n\n### GIT常用命令\n- 配置git用户名和邮箱\n    + git config --global user.name zhangsan\n    + git config --global user.email demotest123@163.com\n- 查看当前的git配置\n    + git config --list\n- 初始化git仓库\n    + git init\n- 查看当前仓库的状态 \n    + git status\n- 将工作目录中的文件添加到暂存区\n    + git add\n- 将暂存区中的代码提交到本地仓库 形成一个版本\n    + git commit -m 备注 \n- 查看本地仓库中的历史提交版本\n    + git log \n- 将暂存区中的文件恢复到工作目录\n    + git rm --cached 文件列表 \n    + 说明:\n        * 必须保证工作目录中的代码和暂存区中的代码一致\n        * 此时工作目录中有此文件 暂存区中没有此文件 这个文件不被git管理\n- 用暂存区中的文件覆盖工作目录中的文件\n    + git checkout -- 文件列表\n    + 说明：暂存区和工作目录都有此文件 这个文件依然被git管理\n- 回滚到本地仓库中的特定版本并覆盖暂存区和工作目录\n    + git reset --hard commitID\n- 查看分支\n    + git branch\n- 创建分支\n    + git branch 分支名称\n- 切换分支\n    + git checkout 分支名称\n- 创建并切换分支\n    + git checkout -b 分支名称 \n- 删除分支(如果分支没有被合并不允许删除)\n    + git branch -d 分支名称\n- 删除分支(强制删除分支)\n    + git branch -D 分支名称\n- 合并分支\n    + git merge 来源分支\n- 初始化一个裸露仓库(公共代码仓库)\n    + git init --bare \n- 向远程仓库推送代码\n    + git push 远程仓库地址 本地分支名称:远程分支名称\n- 从远程仓库中拉取代码(拉取最新版本到本地 开发过程中使用)\n    + git pull 远程仓库地址 远程分支名称:本地分支名称\n- 为远程仓库地址创建别名\n    + git remote add 别名 远程仓库地址\n- 查看远程地址的详情信息\n    + git remote -v\n- 查看当前别名所对应的远程仓库地址\n    + git remote show 别名 \n- 删除当前别名及所对应的远程仓库地址\n    + git remote remove 别名 \n- 从远程仓库获取代码(拉取所有版本到本地)\n    + git clone 远程仓库地址 项目名称\n    + 使用场景：加入到已有项目的开发中 需要先拉取所有版本到本地 再进行开发\n- 冲突修复\n    + 模拟冲突\n        * 张三和李四分别克隆代码到本地\n        * 张三改了demo文件并提交到远端仓库\n        * 李四也改了同一个文件\n        * 这时因为张三已经提交了一版代码到远程仓库\n        * 远程仓库的代码要比李四本地的代码新\n        * 所以李四不能直接向远程仓库推送代码\n        * 要先拉去再推送\n        * 此时因为张三和李四改了同一个文件所以产生了冲突\n        * 李四解决冲突并再次提交代码到远程仓库\n- 多人协作开发免登录操作\n    + ssh-keygen\n\n### git使用流程\n-   1.配置账户信息\n    + git config --global user.name 用户名\n    + git config --global user.email 邮箱地址\n    + git config --list 查看当前的git配置\n-   2.初始化本地仓库\n    + git init\n-   3.查看本地仓库的状态\n    + git status\n-   4.将工作目录中的文件提交到暂存区\n    + git add 文件列表\n    + git add . 添加工作目录中所有的文件到暂存区\n-   1. 将暂存区中的代码提交到本地仓库\n    + git commit -m 备注\n    + git commit -m \"first commit\"\n\n### git 忽略清单\n- .gitignore文件","slug":"一篇来自2018年4月17日的Git笔记","published":1,"updated":"2020-11-09T03:30:23.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhfjo27c000188r41zylgd97","content":"<h2 id=\"GIT\"><a href=\"#GIT\" class=\"headerlink\" title=\"GIT\"></a>GIT</h2><h3 id=\"命令行窗口\"><a href=\"#命令行窗口\" class=\"headerlink\" title=\"命令行窗口\"></a>命令行窗口</h3><ul>\n<li>我们平时使用计算机都是通过可视化的界面来对电脑发送命令<ul>\n<li>鼠标右键-&gt;新建-&gt;新建文件夹</li>\n</ul>\n</li>\n<li>命令行窗口也是一种可以向计算机发送命令的途径<ul>\n<li>通过命令的形式告诉计算机我们要做什么</li>\n<li>mkdir 文件夹的名字</li>\n</ul>\n</li>\n<li>开启命令行<ul>\n<li>win + R -&gt; cmd -&gt; enter</li>\n</ul>\n</li>\n<li>常用命令行工具<ul>\n<li>cmd</li>\n<li>powershell</li>\n<li>git bash</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>pwd (print working directory) 查看当前所在的目录</li>\n<li>cd (change directory) 切换目录</li>\n<li>ls (list) 查看当前目录下的内容(有兼容问题 可以用dir)</li>\n<li>clear 清屏（有兼容问题  可以用cls）</li>\n<li>mkdir (make directory) 创建目录</li>\n<li>touch 创建文件（有兼容问题 可以用 type nul&gt;文件名）</li>\n<li>cat 查看文件内容 一次性将所有内容输出</li>\n<li>less 查看文件内容 每一次查看部分文件内容<ul>\n<li>回车 一次向下走一行</li>\n<li>空格 一次向下走一页</li>\n<li>b（back）    一次向上走一页</li>\n<li>q（quit）    退出</li>\n</ul>\n</li>\n<li>rm (remove) 删除文件 如 rm index.html、rm -rf blog（删除有内容的文件夹）</li>\n<li>rmdir (remove directory) 删除文件夹 只能删除空文件夹 不常用</li>\n<li>mv (move) 移动文件或重命名</li>\n<li>cp (copy) 复制文件</li>\n<li>echo ‘内容’ &gt; 文件 输出内容到文件 每次输出都是覆盖原有文件内容</li>\n<li>ehco ‘内容’ &gt;&gt; 文件 输出内容到文件 每次输出都是追新内容</li>\n<li>命令的基本组成部分<ul>\n<li>rm(删除命令) -rf(选项)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"GIT是什么\"><a href=\"#GIT是什么\" class=\"headerlink\" title=\"GIT是什么\"></a>GIT是什么</h3><ul>\n<li>版本控制工具<ul>\n<li>例子：<ul>\n<li>人事专员管理职工信息</li>\n<li>项目功能变更导致的问题</li>\n<li>多人开发一个项目 代码共享时的问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"GIT三大区域\"><a href=\"#GIT三大区域\" class=\"headerlink\" title=\"GIT三大区域\"></a>GIT三大区域</h3><ul>\n<li>工作目录<ul>\n<li>存放项目代码的目录</li>\n</ul>\n</li>\n<li>暂存区<ul>\n<li>临时存放更改的了文件</li>\n<li>防止工作目录中的代码丢失</li>\n</ul>\n</li>\n<li>代码仓库<ul>\n<li>当开发的功能足以形成一个版本的时候 可以将代码形成版本提交到仓库</li>\n<li>相当于复制了一份当前的代码存储到了仓库中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"GIT常用命令\"><a href=\"#GIT常用命令\" class=\"headerlink\" title=\"GIT常用命令\"></a>GIT常用命令</h3><ul>\n<li>配置git用户名和邮箱<ul>\n<li>git config –global user.name zhangsan</li>\n<li>git config –global user.email <a href=\"mailto:&#x64;&#101;&#109;&#111;&#116;&#x65;&#115;&#x74;&#49;&#50;&#x33;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#109;\">&#x64;&#101;&#109;&#111;&#116;&#x65;&#115;&#x74;&#49;&#50;&#x33;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#109;</a></li>\n</ul>\n</li>\n<li>查看当前的git配置<ul>\n<li>git config –list</li>\n</ul>\n</li>\n<li>初始化git仓库<ul>\n<li>git init</li>\n</ul>\n</li>\n<li>查看当前仓库的状态 <ul>\n<li>git status</li>\n</ul>\n</li>\n<li>将工作目录中的文件添加到暂存区<ul>\n<li>git add</li>\n</ul>\n</li>\n<li>将暂存区中的代码提交到本地仓库 形成一个版本<ul>\n<li>git commit -m 备注 </li>\n</ul>\n</li>\n<li>查看本地仓库中的历史提交版本<ul>\n<li>git log </li>\n</ul>\n</li>\n<li>将暂存区中的文件恢复到工作目录<ul>\n<li>git rm –cached 文件列表 </li>\n<li>说明:<ul>\n<li>必须保证工作目录中的代码和暂存区中的代码一致</li>\n<li>此时工作目录中有此文件 暂存区中没有此文件 这个文件不被git管理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>用暂存区中的文件覆盖工作目录中的文件<ul>\n<li>git checkout – 文件列表</li>\n<li>说明：暂存区和工作目录都有此文件 这个文件依然被git管理</li>\n</ul>\n</li>\n<li>回滚到本地仓库中的特定版本并覆盖暂存区和工作目录<ul>\n<li>git reset –hard commitID</li>\n</ul>\n</li>\n<li>查看分支<ul>\n<li>git branch</li>\n</ul>\n</li>\n<li>创建分支<ul>\n<li>git branch 分支名称</li>\n</ul>\n</li>\n<li>切换分支<ul>\n<li>git checkout 分支名称</li>\n</ul>\n</li>\n<li>创建并切换分支<ul>\n<li>git checkout -b 分支名称 </li>\n</ul>\n</li>\n<li>删除分支(如果分支没有被合并不允许删除)<ul>\n<li>git branch -d 分支名称</li>\n</ul>\n</li>\n<li>删除分支(强制删除分支)<ul>\n<li>git branch -D 分支名称</li>\n</ul>\n</li>\n<li>合并分支<ul>\n<li>git merge 来源分支</li>\n</ul>\n</li>\n<li>初始化一个裸露仓库(公共代码仓库)<ul>\n<li>git init –bare </li>\n</ul>\n</li>\n<li>向远程仓库推送代码<ul>\n<li>git push 远程仓库地址 本地分支名称:远程分支名称</li>\n</ul>\n</li>\n<li>从远程仓库中拉取代码(拉取最新版本到本地 开发过程中使用)<ul>\n<li>git pull 远程仓库地址 远程分支名称:本地分支名称</li>\n</ul>\n</li>\n<li>为远程仓库地址创建别名<ul>\n<li>git remote add 别名 远程仓库地址</li>\n</ul>\n</li>\n<li>查看远程地址的详情信息<ul>\n<li>git remote -v</li>\n</ul>\n</li>\n<li>查看当前别名所对应的远程仓库地址<ul>\n<li>git remote show 别名 </li>\n</ul>\n</li>\n<li>删除当前别名及所对应的远程仓库地址<ul>\n<li>git remote remove 别名 </li>\n</ul>\n</li>\n<li>从远程仓库获取代码(拉取所有版本到本地)<ul>\n<li>git clone 远程仓库地址 项目名称</li>\n<li>使用场景：加入到已有项目的开发中 需要先拉取所有版本到本地 再进行开发</li>\n</ul>\n</li>\n<li>冲突修复<ul>\n<li>模拟冲突<ul>\n<li>张三和李四分别克隆代码到本地</li>\n<li>张三改了demo文件并提交到远端仓库</li>\n<li>李四也改了同一个文件</li>\n<li>这时因为张三已经提交了一版代码到远程仓库</li>\n<li>远程仓库的代码要比李四本地的代码新</li>\n<li>所以李四不能直接向远程仓库推送代码</li>\n<li>要先拉去再推送</li>\n<li>此时因为张三和李四改了同一个文件所以产生了冲突</li>\n<li>李四解决冲突并再次提交代码到远程仓库</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多人协作开发免登录操作<ul>\n<li>ssh-keygen</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"git使用流程\"><a href=\"#git使用流程\" class=\"headerlink\" title=\"git使用流程\"></a>git使用流程</h3><ul>\n<li>1.配置账户信息<ul>\n<li>git config –global user.name 用户名</li>\n<li>git config –global user.email 邮箱地址</li>\n<li>git config –list 查看当前的git配置</li>\n</ul>\n</li>\n<li>2.初始化本地仓库<ul>\n<li>git init</li>\n</ul>\n</li>\n<li>3.查看本地仓库的状态<ul>\n<li>git status</li>\n</ul>\n</li>\n<li>4.将工作目录中的文件提交到暂存区<ul>\n<li>git add 文件列表</li>\n<li>git add . 添加工作目录中所有的文件到暂存区</li>\n</ul>\n</li>\n<li><ol>\n<li>将暂存区中的代码提交到本地仓库<ul>\n<li>git commit -m 备注</li>\n<li>git commit -m “first commit”</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"git-忽略清单\"><a href=\"#git-忽略清单\" class=\"headerlink\" title=\"git 忽略清单\"></a>git 忽略清单</h3><ul>\n<li>.gitignore文件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GIT\"><a href=\"#GIT\" class=\"headerlink\" title=\"GIT\"></a>GIT</h2><h3 id=\"命令行窗口\"><a href=\"#命令行窗口\" class=\"headerlink\" title=\"命令行窗口\"></a>命令行窗口</h3><ul>\n<li>我们平时使用计算机都是通过可视化的界面来对电脑发送命令<ul>\n<li>鼠标右键-&gt;新建-&gt;新建文件夹</li>\n</ul>\n</li>\n<li>命令行窗口也是一种可以向计算机发送命令的途径<ul>\n<li>通过命令的形式告诉计算机我们要做什么</li>\n<li>mkdir 文件夹的名字</li>\n</ul>\n</li>\n<li>开启命令行<ul>\n<li>win + R -&gt; cmd -&gt; enter</li>\n</ul>\n</li>\n<li>常用命令行工具<ul>\n<li>cmd</li>\n<li>powershell</li>\n<li>git bash</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>pwd (print working directory) 查看当前所在的目录</li>\n<li>cd (change directory) 切换目录</li>\n<li>ls (list) 查看当前目录下的内容(有兼容问题 可以用dir)</li>\n<li>clear 清屏（有兼容问题  可以用cls）</li>\n<li>mkdir (make directory) 创建目录</li>\n<li>touch 创建文件（有兼容问题 可以用 type nul&gt;文件名）</li>\n<li>cat 查看文件内容 一次性将所有内容输出</li>\n<li>less 查看文件内容 每一次查看部分文件内容<ul>\n<li>回车 一次向下走一行</li>\n<li>空格 一次向下走一页</li>\n<li>b（back）    一次向上走一页</li>\n<li>q（quit）    退出</li>\n</ul>\n</li>\n<li>rm (remove) 删除文件 如 rm index.html、rm -rf blog（删除有内容的文件夹）</li>\n<li>rmdir (remove directory) 删除文件夹 只能删除空文件夹 不常用</li>\n<li>mv (move) 移动文件或重命名</li>\n<li>cp (copy) 复制文件</li>\n<li>echo ‘内容’ &gt; 文件 输出内容到文件 每次输出都是覆盖原有文件内容</li>\n<li>ehco ‘内容’ &gt;&gt; 文件 输出内容到文件 每次输出都是追新内容</li>\n<li>命令的基本组成部分<ul>\n<li>rm(删除命令) -rf(选项)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"GIT是什么\"><a href=\"#GIT是什么\" class=\"headerlink\" title=\"GIT是什么\"></a>GIT是什么</h3><ul>\n<li>版本控制工具<ul>\n<li>例子：<ul>\n<li>人事专员管理职工信息</li>\n<li>项目功能变更导致的问题</li>\n<li>多人开发一个项目 代码共享时的问题</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"GIT三大区域\"><a href=\"#GIT三大区域\" class=\"headerlink\" title=\"GIT三大区域\"></a>GIT三大区域</h3><ul>\n<li>工作目录<ul>\n<li>存放项目代码的目录</li>\n</ul>\n</li>\n<li>暂存区<ul>\n<li>临时存放更改的了文件</li>\n<li>防止工作目录中的代码丢失</li>\n</ul>\n</li>\n<li>代码仓库<ul>\n<li>当开发的功能足以形成一个版本的时候 可以将代码形成版本提交到仓库</li>\n<li>相当于复制了一份当前的代码存储到了仓库中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"GIT常用命令\"><a href=\"#GIT常用命令\" class=\"headerlink\" title=\"GIT常用命令\"></a>GIT常用命令</h3><ul>\n<li>配置git用户名和邮箱<ul>\n<li>git config –global user.name zhangsan</li>\n<li>git config –global user.email <a href=\"mailto:&#x64;&#101;&#109;&#111;&#116;&#x65;&#115;&#x74;&#49;&#50;&#x33;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#109;\">&#x64;&#101;&#109;&#111;&#116;&#x65;&#115;&#x74;&#49;&#50;&#x33;&#x40;&#x31;&#x36;&#51;&#x2e;&#x63;&#x6f;&#109;</a></li>\n</ul>\n</li>\n<li>查看当前的git配置<ul>\n<li>git config –list</li>\n</ul>\n</li>\n<li>初始化git仓库<ul>\n<li>git init</li>\n</ul>\n</li>\n<li>查看当前仓库的状态 <ul>\n<li>git status</li>\n</ul>\n</li>\n<li>将工作目录中的文件添加到暂存区<ul>\n<li>git add</li>\n</ul>\n</li>\n<li>将暂存区中的代码提交到本地仓库 形成一个版本<ul>\n<li>git commit -m 备注 </li>\n</ul>\n</li>\n<li>查看本地仓库中的历史提交版本<ul>\n<li>git log </li>\n</ul>\n</li>\n<li>将暂存区中的文件恢复到工作目录<ul>\n<li>git rm –cached 文件列表 </li>\n<li>说明:<ul>\n<li>必须保证工作目录中的代码和暂存区中的代码一致</li>\n<li>此时工作目录中有此文件 暂存区中没有此文件 这个文件不被git管理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>用暂存区中的文件覆盖工作目录中的文件<ul>\n<li>git checkout – 文件列表</li>\n<li>说明：暂存区和工作目录都有此文件 这个文件依然被git管理</li>\n</ul>\n</li>\n<li>回滚到本地仓库中的特定版本并覆盖暂存区和工作目录<ul>\n<li>git reset –hard commitID</li>\n</ul>\n</li>\n<li>查看分支<ul>\n<li>git branch</li>\n</ul>\n</li>\n<li>创建分支<ul>\n<li>git branch 分支名称</li>\n</ul>\n</li>\n<li>切换分支<ul>\n<li>git checkout 分支名称</li>\n</ul>\n</li>\n<li>创建并切换分支<ul>\n<li>git checkout -b 分支名称 </li>\n</ul>\n</li>\n<li>删除分支(如果分支没有被合并不允许删除)<ul>\n<li>git branch -d 分支名称</li>\n</ul>\n</li>\n<li>删除分支(强制删除分支)<ul>\n<li>git branch -D 分支名称</li>\n</ul>\n</li>\n<li>合并分支<ul>\n<li>git merge 来源分支</li>\n</ul>\n</li>\n<li>初始化一个裸露仓库(公共代码仓库)<ul>\n<li>git init –bare </li>\n</ul>\n</li>\n<li>向远程仓库推送代码<ul>\n<li>git push 远程仓库地址 本地分支名称:远程分支名称</li>\n</ul>\n</li>\n<li>从远程仓库中拉取代码(拉取最新版本到本地 开发过程中使用)<ul>\n<li>git pull 远程仓库地址 远程分支名称:本地分支名称</li>\n</ul>\n</li>\n<li>为远程仓库地址创建别名<ul>\n<li>git remote add 别名 远程仓库地址</li>\n</ul>\n</li>\n<li>查看远程地址的详情信息<ul>\n<li>git remote -v</li>\n</ul>\n</li>\n<li>查看当前别名所对应的远程仓库地址<ul>\n<li>git remote show 别名 </li>\n</ul>\n</li>\n<li>删除当前别名及所对应的远程仓库地址<ul>\n<li>git remote remove 别名 </li>\n</ul>\n</li>\n<li>从远程仓库获取代码(拉取所有版本到本地)<ul>\n<li>git clone 远程仓库地址 项目名称</li>\n<li>使用场景：加入到已有项目的开发中 需要先拉取所有版本到本地 再进行开发</li>\n</ul>\n</li>\n<li>冲突修复<ul>\n<li>模拟冲突<ul>\n<li>张三和李四分别克隆代码到本地</li>\n<li>张三改了demo文件并提交到远端仓库</li>\n<li>李四也改了同一个文件</li>\n<li>这时因为张三已经提交了一版代码到远程仓库</li>\n<li>远程仓库的代码要比李四本地的代码新</li>\n<li>所以李四不能直接向远程仓库推送代码</li>\n<li>要先拉去再推送</li>\n<li>此时因为张三和李四改了同一个文件所以产生了冲突</li>\n<li>李四解决冲突并再次提交代码到远程仓库</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>多人协作开发免登录操作<ul>\n<li>ssh-keygen</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"git使用流程\"><a href=\"#git使用流程\" class=\"headerlink\" title=\"git使用流程\"></a>git使用流程</h3><ul>\n<li>1.配置账户信息<ul>\n<li>git config –global user.name 用户名</li>\n<li>git config –global user.email 邮箱地址</li>\n<li>git config –list 查看当前的git配置</li>\n</ul>\n</li>\n<li>2.初始化本地仓库<ul>\n<li>git init</li>\n</ul>\n</li>\n<li>3.查看本地仓库的状态<ul>\n<li>git status</li>\n</ul>\n</li>\n<li>4.将工作目录中的文件提交到暂存区<ul>\n<li>git add 文件列表</li>\n<li>git add . 添加工作目录中所有的文件到暂存区</li>\n</ul>\n</li>\n<li><ol>\n<li>将暂存区中的代码提交到本地仓库<ul>\n<li>git commit -m 备注</li>\n<li>git commit -m “first commit”</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"git-忽略清单\"><a href=\"#git-忽略清单\" class=\"headerlink\" title=\"git 忽略清单\"></a>git 忽略清单</h3><ul>\n<li>.gitignore文件</li>\n</ul>\n"},{"title":"理解 JavaScript 的 async/await","date":"2020-11-12T23:26:22.000Z","author":"heyXiao","_content":"# [理解 JavaScript 的 async/await]()\n\nJavaScript 中的 async/await 是 [AsyncFunction 特性](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction) 中的关键字。目前为止，除了 IE 之外，常用浏览器和 Node (v7.6+) 都已经支持该特性。具体支持情况可以在 [这里](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction#Browser_compatibility) 查看。\n\n---\n\n我第一次看到 async/await 这组关键字并不是在 JavaScript 语言里，而是在 C# 5.0 的语法中。C# 的 async/await 需要在 .NET Framework 4.5 以上的版本中使用，因此我还很悲伤了一阵——为了要兼容 XP 系统，我们开发的软件不能使用高于 4.0 版本的 .NET Framework。\n\n我之前在[《闲谈异步调用“扁平”化》](https://segmentfault.com/a/1190000003742890) 中就谈到了这个问题。无论是在 C# 还是 JavaScript 中，async/await 都是非常棒的特性，它们也都是非常甜的语法糖。C# 的 async/await 实现离不开 [Task 或 Task<Result>](https://msdn.microsoft.com/library/dd321424.aspx) 类，而 JavaScript 的 async/await 实现，也离不开 [Promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)。\n\n现在抛开 C# 和 .NET Framework，专心研究下 JavaScript 的 async/await。\n\n## 1\\. async 和 await 在干什么\n\n任意一个名称都是有意义的，先从字面意思来理解。async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。\n\n另外还有一个很有意思的语法规定，await 只能出现在 async 函数中。然后细心的朋友会产生一个疑问，如果 await 只能出现在 async 函数中，那这个 async 函数应该怎么调用？\n\n如果需要通过 await 来调用一个 async 函数，那这个调用的外面必须得再包一个 async 函数，然后……进入死循环，永无出头之日……\n\n如果 async 函数不需要 await 来调用，那 async 到底起个啥作用？\n\n### 1.1. async 起什么作用\n\n这个问题的关键在于，async 函数是怎么处理它的返回值的！\n\n我们当然希望它能直接通过 `return` 语句返回我们想要的值，但是如果真是这样，似乎就没 await 什么事了。所以，写段代码来试试，看它到底会返回什么：\n\n    async function testAsync() {\n        return \"hello async\";\n    }\n\n    const result = testAsync();\n    console.log(result);\n\n看到输出就恍然大悟了——输出的是一个 Promise 对象。\n\n    c:\\var\\test> node --harmony_async_await .\n    Promise { 'hello async' }\n\n所以，async 函数返回的是一个 Promise 对象。从[文档](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/async_function)中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 `return` 一个直接量，async 会把这个直接量通过 `Promise.resolve()` 封装成 Promise 对象。\n\n> 补充知识点 _\\[2020-06-04\\]_\n>\n> `Promise.resolve(x)` 可以看作是 `new Promise(resolve => resolve(x))` 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，我们当然应该用原来的方式：`then()` 链来处理这个 Promise 对象，就像这样\n\n    testAsync().then(v => {\n        console.log(v);    // 输出 hello async\n    });\n\n现在回过头来想下，如果 async 函数没有返回值，又该如何？很容易想到，它会返回 `Promise.resolve(undefined)`。\n\n联想一下 Promise 的特点——无等待，所以在没有 `await` 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n\n那么下一个关键点就在于 await 关键字了。\n\n### 1.2. await 到底在等啥\n\n一般来说，都认为 await 是在等待一个 async 函数完成。不过按[语法说明](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/await)，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行\n\n    function getSomething() {\n        return \"something\";\n    }\n\n    async function testAsync() {\n        return Promise.resolve(\"hello async\");\n    }\n\n    async function test() {\n        const v1 = await getSomething();\n        const v2 = await testAsync();\n        console.log(v1, v2);\n    }\n\n    test();\n\n### 1.3. await 等到了要等的，然后呢\n\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，`await` 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。\n\n如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n> 看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。\n\n## 2\\. async/await 帮我们干了啥\n\n### 2.1. 作个简单的比较\n\n上面已经说明了 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。\n\n现在举例，用 `setTimeout` 模拟耗时的异步操作，先来看看不用 async/await 会怎么写\n\n    function takeLongTime() {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(\"long_time_value\"), 1000);\n        });\n    }\n\n    takeLongTime().then(v => {\n        console.log(\"got\", v);\n    });\n\n如果改用 async/await 呢，会是这样\n\n    function takeLongTime() {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(\"long_time_value\"), 1000);\n        });\n    }\n\n    async function test() {\n        const v = await takeLongTime();\n        console.log(v);\n    }\n\n    test();\n\n眼尖的同学已经发现 `takeLongTime()` 没有申明为 `async`。实际上，`takeLongTime()` 本身就是返回的 Promise 对象，加不加 `async` 结果都一样，如果没明白，请回过头再去看看上面的“async 起什么作用”。\n\n又一个疑问产生了，这两段代码，两种方式对异步调用的处理（实际就是对 Promise 对象的处理）差别并不明显，甚至使用 async/await 还需要多写一些代码，那它的优势到底在哪？\n\n### 2.2. async/await 的优势在于处理 then 链\n\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。我们仍然用 `setTimeout` 来模拟异步操作：\n\n    /**\n     * 传入参数 n，表示这个函数执行的时间（毫秒）\n     * 执行的结果是 n + 200，这个值将用于下一步骤\n     */\n    function takeLongTime(n) {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(n + 200), n);\n        });\n    }\n\n    function step1(n) {\n        console.log(`step1 with ${n}`);\n        return takeLongTime(n);\n    }\n\n    function step2(n) {\n        console.log(`step2 with ${n}`);\n        return takeLongTime(n);\n    }\n\n    function step3(n) {\n        console.log(`step3 with ${n}`);\n        return takeLongTime(n);\n    }\n\n现在用 Promise 方式来实现这三个步骤的处理\n\n    function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        step1(time1)\n            .then(time2 => step2(time2))\n            .then(time3 => step3(time3))\n            .then(result => {\n                console.log(`result is ${result}`);\n                console.timeEnd(\"doIt\");\n            });\n    }\n\n    doIt();\n\n    // c:\\var\\test>node --harmony_async_await .\n    // step1 with 300\n    // step2 with 500\n    // step3 with 700\n    // result is 900\n    // doIt: 1507.251ms\n\n输出结果 `result` 是 `step3()` 的参数 `700 + 200` = `900`。`doIt()` 顺序执行了三个步骤，一共用了 `300 + 500 + 700 = 1500` 毫秒，和 `console.time()/console.timeEnd()` 计算的结果一致。\n\n如果用 async/await 来实现呢，会是这样\n\n    async function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time3 = await step2(time2);\n        const result = await step3(time3);\n        console.log(`result is ${result}`);\n        console.timeEnd(\"doIt\");\n    }\n\n    doIt();\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n### 2.3. 还有更酷的\n\n现在把业务要求改一下，仍然是三个步骤，但每一个步骤都需要之前每个步骤的结果。\n\n    function step1(n) {\n        console.log(`step1 with ${n}`);\n        return takeLongTime(n);\n    }\n\n    function step2(m, n) {\n        console.log(`step2 with ${m} and ${n}`);\n        return takeLongTime(m + n);\n    }\n\n    function step3(k, m, n) {\n        console.log(`step3 with ${k}, ${m} and ${n}`);\n        return takeLongTime(k + m + n);\n    }\n\n这回先用 async/await 来写：\n\n    async function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time3 = await step2(time1, time2);\n        const result = await step3(time1, time2, time3);\n        console.log(`result is ${result}`);\n        console.timeEnd(\"doIt\");\n    }\n\n    doIt();\n\n    // c:\\var\\test>node --harmony_async_await .\n    // step1 with 300\n    // step2 with 800 = 300 + 500\n    // step3 with 1800 = 300 + 500 + 1000\n    // result is 2000\n    // doIt: 2907.387ms\n\n除了觉得执行时间变长了之外，似乎和之前的示例没啥区别啊！别急，认真想想如果把它写成 Promise 方式实现会是什么样子？\n\n    function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        step1(time1)\n            .then(time2 => {\n                return step2(time1, time2)\n                    .then(time3 => [time1, time2, time3]);\n            })\n            .then(times => {\n                const [time1, time2, time3] = times;\n                return step3(time1, time2, time3);\n            })\n            .then(result => {\n                console.log(`result is ${result}`);\n                console.timeEnd(\"doIt\");\n            });\n    }\n\n    doIt();\n\n有没有感觉有点复杂的样子？那一堆参数处理，就是 Promise 方案的死穴—— 参数传递太麻烦了，看着就晕！\n\n## 3\\. 洗洗睡吧\n\n就目前来说，已经理解 async/await 了吧？但其实还有一些事情没提及——Promise 有可能 reject 啊，怎么处理呢？如果需要并行处理3个步骤，再等待所有结果，又该怎么处理呢？\n\n[阮一峰老师已经说过了](http://www.ruanyifeng.com/blog/2015/05/async.html)，我就懒得说了。\n\n## 4\\. 推荐相关文章\n\n- [在微信小程序中使用 async/await](https://segmentfault.com/a/1190000021966277) 2020-03-10\n- [代码审查，异步调用的常见问题剖析](https://segmentfault.com/a/1190000022349639) 2020-04-12\n- [Proxy 封装微信小程序的异步调用](https://segmentfault.com/a/1190000022315137) 2020-04-9\n- [改进异步封装：处理带返回值的异步调用](https://segmentfault.com/a/1190000022467002) 2020-04-25\n- [从地狱到天堂，Node 回调向 async/await 转变](https://segmentfault.com/a/1190000007987187) 2017-01-02\n- [异步编程需要“意识”](https://segmentfault.com/a/1190000013337421) 2018-02-23\n- [从不用 try-catch 实现的 async/await 语法说错误处理](https://segmentfault.com/a/1190000011802045) 2017-10-31\n\n## 5\\. 关于转载\n\n转载自[思否](https://segmentfault.com/a/1190000007535316) 作者[边城](https://segmentfault.com/u/jamesfancy)\n\n","source":"_posts/理解 JavaScript 的 async&await.md","raw":"---\ntitle: 理解 JavaScript 的 async/await\ndate: 2020-11-13 07:26:22\nauthor: heyXiao\n# password: 35482c55c9fcbe4ff1b6023476c7acd59c011b9e8870376a45b3416ba8092d3d\ncategories: 技术\ntags:\n  - JavaScript\n  - 转载\n---\n# [理解 JavaScript 的 async/await]()\n\nJavaScript 中的 async/await 是 [AsyncFunction 特性](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction) 中的关键字。目前为止，除了 IE 之外，常用浏览器和 Node (v7.6+) 都已经支持该特性。具体支持情况可以在 [这里](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction#Browser_compatibility) 查看。\n\n---\n\n我第一次看到 async/await 这组关键字并不是在 JavaScript 语言里，而是在 C# 5.0 的语法中。C# 的 async/await 需要在 .NET Framework 4.5 以上的版本中使用，因此我还很悲伤了一阵——为了要兼容 XP 系统，我们开发的软件不能使用高于 4.0 版本的 .NET Framework。\n\n我之前在[《闲谈异步调用“扁平”化》](https://segmentfault.com/a/1190000003742890) 中就谈到了这个问题。无论是在 C# 还是 JavaScript 中，async/await 都是非常棒的特性，它们也都是非常甜的语法糖。C# 的 async/await 实现离不开 [Task 或 Task<Result>](https://msdn.microsoft.com/library/dd321424.aspx) 类，而 JavaScript 的 async/await 实现，也离不开 [Promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)。\n\n现在抛开 C# 和 .NET Framework，专心研究下 JavaScript 的 async/await。\n\n## 1\\. async 和 await 在干什么\n\n任意一个名称都是有意义的，先从字面意思来理解。async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。\n\n另外还有一个很有意思的语法规定，await 只能出现在 async 函数中。然后细心的朋友会产生一个疑问，如果 await 只能出现在 async 函数中，那这个 async 函数应该怎么调用？\n\n如果需要通过 await 来调用一个 async 函数，那这个调用的外面必须得再包一个 async 函数，然后……进入死循环，永无出头之日……\n\n如果 async 函数不需要 await 来调用，那 async 到底起个啥作用？\n\n### 1.1. async 起什么作用\n\n这个问题的关键在于，async 函数是怎么处理它的返回值的！\n\n我们当然希望它能直接通过 `return` 语句返回我们想要的值，但是如果真是这样，似乎就没 await 什么事了。所以，写段代码来试试，看它到底会返回什么：\n\n    async function testAsync() {\n        return \"hello async\";\n    }\n\n    const result = testAsync();\n    console.log(result);\n\n看到输出就恍然大悟了——输出的是一个 Promise 对象。\n\n    c:\\var\\test> node --harmony_async_await .\n    Promise { 'hello async' }\n\n所以，async 函数返回的是一个 Promise 对象。从[文档](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/async_function)中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 `return` 一个直接量，async 会把这个直接量通过 `Promise.resolve()` 封装成 Promise 对象。\n\n> 补充知识点 _\\[2020-06-04\\]_\n>\n> `Promise.resolve(x)` 可以看作是 `new Promise(resolve => resolve(x))` 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，我们当然应该用原来的方式：`then()` 链来处理这个 Promise 对象，就像这样\n\n    testAsync().then(v => {\n        console.log(v);    // 输出 hello async\n    });\n\n现在回过头来想下，如果 async 函数没有返回值，又该如何？很容易想到，它会返回 `Promise.resolve(undefined)`。\n\n联想一下 Promise 的特点——无等待，所以在没有 `await` 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n\n那么下一个关键点就在于 await 关键字了。\n\n### 1.2. await 到底在等啥\n\n一般来说，都认为 await 是在等待一个 async 函数完成。不过按[语法说明](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/await)，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行\n\n    function getSomething() {\n        return \"something\";\n    }\n\n    async function testAsync() {\n        return Promise.resolve(\"hello async\");\n    }\n\n    async function test() {\n        const v1 = await getSomething();\n        const v2 = await testAsync();\n        console.log(v1, v2);\n    }\n\n    test();\n\n### 1.3. await 等到了要等的，然后呢\n\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，`await` 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。\n\n如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n> 看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。\n\n## 2\\. async/await 帮我们干了啥\n\n### 2.1. 作个简单的比较\n\n上面已经说明了 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。\n\n现在举例，用 `setTimeout` 模拟耗时的异步操作，先来看看不用 async/await 会怎么写\n\n    function takeLongTime() {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(\"long_time_value\"), 1000);\n        });\n    }\n\n    takeLongTime().then(v => {\n        console.log(\"got\", v);\n    });\n\n如果改用 async/await 呢，会是这样\n\n    function takeLongTime() {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(\"long_time_value\"), 1000);\n        });\n    }\n\n    async function test() {\n        const v = await takeLongTime();\n        console.log(v);\n    }\n\n    test();\n\n眼尖的同学已经发现 `takeLongTime()` 没有申明为 `async`。实际上，`takeLongTime()` 本身就是返回的 Promise 对象，加不加 `async` 结果都一样，如果没明白，请回过头再去看看上面的“async 起什么作用”。\n\n又一个疑问产生了，这两段代码，两种方式对异步调用的处理（实际就是对 Promise 对象的处理）差别并不明显，甚至使用 async/await 还需要多写一些代码，那它的优势到底在哪？\n\n### 2.2. async/await 的优势在于处理 then 链\n\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。我们仍然用 `setTimeout` 来模拟异步操作：\n\n    /**\n     * 传入参数 n，表示这个函数执行的时间（毫秒）\n     * 执行的结果是 n + 200，这个值将用于下一步骤\n     */\n    function takeLongTime(n) {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(n + 200), n);\n        });\n    }\n\n    function step1(n) {\n        console.log(`step1 with ${n}`);\n        return takeLongTime(n);\n    }\n\n    function step2(n) {\n        console.log(`step2 with ${n}`);\n        return takeLongTime(n);\n    }\n\n    function step3(n) {\n        console.log(`step3 with ${n}`);\n        return takeLongTime(n);\n    }\n\n现在用 Promise 方式来实现这三个步骤的处理\n\n    function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        step1(time1)\n            .then(time2 => step2(time2))\n            .then(time3 => step3(time3))\n            .then(result => {\n                console.log(`result is ${result}`);\n                console.timeEnd(\"doIt\");\n            });\n    }\n\n    doIt();\n\n    // c:\\var\\test>node --harmony_async_await .\n    // step1 with 300\n    // step2 with 500\n    // step3 with 700\n    // result is 900\n    // doIt: 1507.251ms\n\n输出结果 `result` 是 `step3()` 的参数 `700 + 200` = `900`。`doIt()` 顺序执行了三个步骤，一共用了 `300 + 500 + 700 = 1500` 毫秒，和 `console.time()/console.timeEnd()` 计算的结果一致。\n\n如果用 async/await 来实现呢，会是这样\n\n    async function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time3 = await step2(time2);\n        const result = await step3(time3);\n        console.log(`result is ${result}`);\n        console.timeEnd(\"doIt\");\n    }\n\n    doIt();\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n### 2.3. 还有更酷的\n\n现在把业务要求改一下，仍然是三个步骤，但每一个步骤都需要之前每个步骤的结果。\n\n    function step1(n) {\n        console.log(`step1 with ${n}`);\n        return takeLongTime(n);\n    }\n\n    function step2(m, n) {\n        console.log(`step2 with ${m} and ${n}`);\n        return takeLongTime(m + n);\n    }\n\n    function step3(k, m, n) {\n        console.log(`step3 with ${k}, ${m} and ${n}`);\n        return takeLongTime(k + m + n);\n    }\n\n这回先用 async/await 来写：\n\n    async function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        const time2 = await step1(time1);\n        const time3 = await step2(time1, time2);\n        const result = await step3(time1, time2, time3);\n        console.log(`result is ${result}`);\n        console.timeEnd(\"doIt\");\n    }\n\n    doIt();\n\n    // c:\\var\\test>node --harmony_async_await .\n    // step1 with 300\n    // step2 with 800 = 300 + 500\n    // step3 with 1800 = 300 + 500 + 1000\n    // result is 2000\n    // doIt: 2907.387ms\n\n除了觉得执行时间变长了之外，似乎和之前的示例没啥区别啊！别急，认真想想如果把它写成 Promise 方式实现会是什么样子？\n\n    function doIt() {\n        console.time(\"doIt\");\n        const time1 = 300;\n        step1(time1)\n            .then(time2 => {\n                return step2(time1, time2)\n                    .then(time3 => [time1, time2, time3]);\n            })\n            .then(times => {\n                const [time1, time2, time3] = times;\n                return step3(time1, time2, time3);\n            })\n            .then(result => {\n                console.log(`result is ${result}`);\n                console.timeEnd(\"doIt\");\n            });\n    }\n\n    doIt();\n\n有没有感觉有点复杂的样子？那一堆参数处理，就是 Promise 方案的死穴—— 参数传递太麻烦了，看着就晕！\n\n## 3\\. 洗洗睡吧\n\n就目前来说，已经理解 async/await 了吧？但其实还有一些事情没提及——Promise 有可能 reject 啊，怎么处理呢？如果需要并行处理3个步骤，再等待所有结果，又该怎么处理呢？\n\n[阮一峰老师已经说过了](http://www.ruanyifeng.com/blog/2015/05/async.html)，我就懒得说了。\n\n## 4\\. 推荐相关文章\n\n- [在微信小程序中使用 async/await](https://segmentfault.com/a/1190000021966277) 2020-03-10\n- [代码审查，异步调用的常见问题剖析](https://segmentfault.com/a/1190000022349639) 2020-04-12\n- [Proxy 封装微信小程序的异步调用](https://segmentfault.com/a/1190000022315137) 2020-04-9\n- [改进异步封装：处理带返回值的异步调用](https://segmentfault.com/a/1190000022467002) 2020-04-25\n- [从地狱到天堂，Node 回调向 async/await 转变](https://segmentfault.com/a/1190000007987187) 2017-01-02\n- [异步编程需要“意识”](https://segmentfault.com/a/1190000013337421) 2018-02-23\n- [从不用 try-catch 实现的 async/await 语法说错误处理](https://segmentfault.com/a/1190000011802045) 2017-10-31\n\n## 5\\. 关于转载\n\n转载自[思否](https://segmentfault.com/a/1190000007535316) 作者[边城](https://segmentfault.com/u/jamesfancy)\n\n","slug":"理解 JavaScript 的 async&await","published":1,"updated":"2020-11-13T00:49:13.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhfjo27h000388r49jbe80ro","content":"<h1 id=\"理解-JavaScript-的-async-await\"><a href=\"#理解-JavaScript-的-async-await\" class=\"headerlink\" title=\"理解 JavaScript 的 async/await\"></a><a href=\"\">理解 JavaScript 的 async/await</a></h1><p>JavaScript 中的 async/await 是 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction 特性</a> 中的关键字。目前为止，除了 IE 之外，常用浏览器和 Node (v7.6+) 都已经支持该特性。具体支持情况可以在 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction#Browser_compatibility\">这里</a> 查看。</p>\n<hr>\n<p>我第一次看到 async/await 这组关键字并不是在 JavaScript 语言里，而是在 C# 5.0 的语法中。C# 的 async/await 需要在 .NET Framework 4.5 以上的版本中使用，因此我还很悲伤了一阵——为了要兼容 XP 系统，我们开发的软件不能使用高于 4.0 版本的 .NET Framework。</p>\n<p>我之前在<a href=\"https://segmentfault.com/a/1190000003742890\">《闲谈异步调用“扁平”化》</a> 中就谈到了这个问题。无论是在 C# 还是 JavaScript 中，async/await 都是非常棒的特性，它们也都是非常甜的语法糖。C# 的 async/await 实现离不开 <a href=\"https://msdn.microsoft.com/library/dd321424.aspx\">Task 或 Task<Result></a> 类，而 JavaScript 的 async/await 实现，也离不开 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>。</p>\n<p>现在抛开 C# 和 .NET Framework，专心研究下 JavaScript 的 async/await。</p>\n<h2 id=\"1-async-和-await-在干什么\"><a href=\"#1-async-和-await-在干什么\" class=\"headerlink\" title=\"1. async 和 await 在干什么\"></a>1. async 和 await 在干什么</h2><p>任意一个名称都是有意义的，先从字面意思来理解。async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>\n<p>另外还有一个很有意思的语法规定，await 只能出现在 async 函数中。然后细心的朋友会产生一个疑问，如果 await 只能出现在 async 函数中，那这个 async 函数应该怎么调用？</p>\n<p>如果需要通过 await 来调用一个 async 函数，那这个调用的外面必须得再包一个 async 函数，然后……进入死循环，永无出头之日……</p>\n<p>如果 async 函数不需要 await 来调用，那 async 到底起个啥作用？</p>\n<h3 id=\"1-1-async-起什么作用\"><a href=\"#1-1-async-起什么作用\" class=\"headerlink\" title=\"1.1. async 起什么作用\"></a>1.1. async 起什么作用</h3><p>这个问题的关键在于，async 函数是怎么处理它的返回值的！</p>\n<p>我们当然希望它能直接通过 <code>return</code> 语句返回我们想要的值，但是如果真是这样，似乎就没 await 什么事了。所以，写段代码来试试，看它到底会返回什么：</p>\n<pre><code>async function testAsync() &#123;\n    return &quot;hello async&quot;;\n&#125;\n\nconst result = testAsync();\nconsole.log(result);</code></pre>\n<p>看到输出就恍然大悟了——输出的是一个 Promise 对象。</p>\n<pre><code>c:\\var\\test&gt; node --harmony_async_await .\nPromise &#123; &#39;hello async&#39; &#125;</code></pre>\n<p>所以，async 函数返回的是一个 Promise 对象。从<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/async_function\">文档</a>中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 <code>return</code> 一个直接量，async 会把这个直接量通过 <code>Promise.resolve()</code> 封装成 Promise 对象。</p>\n<blockquote>\n<p>补充知识点 <em>[2020-06-04]</em></p>\n<p><code>Promise.resolve(x)</code> 可以看作是 <code>new Promise(resolve =&gt; resolve(x))</code> 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</p>\n</blockquote>\n<p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，我们当然应该用原来的方式：<code>then()</code> 链来处理这个 Promise 对象，就像这样</p>\n<pre><code>testAsync().then(v =&gt; &#123;\n    console.log(v);    // 输出 hello async\n&#125;);</code></pre>\n<p>现在回过头来想下，如果 async 函数没有返回值，又该如何？很容易想到，它会返回 <code>Promise.resolve(undefined)</code>。</p>\n<p>联想一下 Promise 的特点——无等待，所以在没有 <code>await</code> 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p>\n<p>那么下一个关键点就在于 await 关键字了。</p>\n<h3 id=\"1-2-await-到底在等啥\"><a href=\"#1-2-await-到底在等啥\" class=\"headerlink\" title=\"1.2. await 到底在等啥\"></a>1.2. await 到底在等啥</h3><p>一般来说，都认为 await 是在等待一个 async 函数完成。不过按<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/await\">语法说明</a>，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行</p>\n<pre><code>function getSomething() &#123;\n    return &quot;something&quot;;\n&#125;\n\nasync function testAsync() &#123;\n    return Promise.resolve(&quot;hello async&quot;);\n&#125;\n\nasync function test() &#123;\n    const v1 = await getSomething();\n    const v2 = await testAsync();\n    console.log(v1, v2);\n&#125;\n\ntest();</code></pre>\n<h3 id=\"1-3-await-等到了要等的，然后呢\"><a href=\"#1-3-await-等到了要等的，然后呢\" class=\"headerlink\" title=\"1.3. await 等到了要等的，然后呢\"></a>1.3. await 等到了要等的，然后呢</h3><p>await 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，<code>await</code> 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p>\n<p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</p>\n<p>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p>\n<blockquote>\n<p>看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n</blockquote>\n<h2 id=\"2-async-await-帮我们干了啥\"><a href=\"#2-async-await-帮我们干了啥\" class=\"headerlink\" title=\"2. async/await 帮我们干了啥\"></a>2. async/await 帮我们干了啥</h2><h3 id=\"2-1-作个简单的比较\"><a href=\"#2-1-作个简单的比较\" class=\"headerlink\" title=\"2.1. 作个简单的比较\"></a>2.1. 作个简单的比较</h3><p>上面已经说明了 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。</p>\n<p>现在举例，用 <code>setTimeout</code> 模拟耗时的异步操作，先来看看不用 async/await 会怎么写</p>\n<pre><code>function takeLongTime() &#123;\n    return new Promise(resolve =&gt; &#123;\n        setTimeout(() =&gt; resolve(&quot;long_time_value&quot;), 1000);\n    &#125;);\n&#125;\n\ntakeLongTime().then(v =&gt; &#123;\n    console.log(&quot;got&quot;, v);\n&#125;);</code></pre>\n<p>如果改用 async/await 呢，会是这样</p>\n<pre><code>function takeLongTime() &#123;\n    return new Promise(resolve =&gt; &#123;\n        setTimeout(() =&gt; resolve(&quot;long_time_value&quot;), 1000);\n    &#125;);\n&#125;\n\nasync function test() &#123;\n    const v = await takeLongTime();\n    console.log(v);\n&#125;\n\ntest();</code></pre>\n<p>眼尖的同学已经发现 <code>takeLongTime()</code> 没有申明为 <code>async</code>。实际上，<code>takeLongTime()</code> 本身就是返回的 Promise 对象，加不加 <code>async</code> 结果都一样，如果没明白，请回过头再去看看上面的“async 起什么作用”。</p>\n<p>又一个疑问产生了，这两段代码，两种方式对异步调用的处理（实际就是对 Promise 对象的处理）差别并不明显，甚至使用 async/await 还需要多写一些代码，那它的优势到底在哪？</p>\n<h3 id=\"2-2-async-await-的优势在于处理-then-链\"><a href=\"#2-2-async-await-的优势在于处理-then-链\" class=\"headerlink\" title=\"2.2. async/await 的优势在于处理 then 链\"></a>2.2. async/await 的优势在于处理 then 链</h3><p>单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</p>\n<p>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。我们仍然用 <code>setTimeout</code> 来模拟异步操作：</p>\n<pre><code>/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) &#123;\n    return new Promise(resolve =&gt; &#123;\n        setTimeout(() =&gt; resolve(n + 200), n);\n    &#125;);\n&#125;\n\nfunction step1(n) &#123;\n    console.log(`step1 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\n\nfunction step2(n) &#123;\n    console.log(`step2 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\n\nfunction step3(n) &#123;\n    console.log(`step3 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;</code></pre>\n<p>现在用 Promise 方式来实现这三个步骤的处理</p>\n<pre><code>function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    step1(time1)\n        .then(time2 =&gt; step2(time2))\n        .then(time3 =&gt; step3(time3))\n        .then(result =&gt; &#123;\n            console.log(`result is $&#123;result&#125;`);\n            console.timeEnd(&quot;doIt&quot;);\n        &#125;);\n&#125;\n\ndoIt();\n\n// c:\\var\\test&gt;node --harmony_async_await .\n// step1 with 300\n// step2 with 500\n// step3 with 700\n// result is 900\n// doIt: 1507.251ms</code></pre>\n<p>输出结果 <code>result</code> 是 <code>step3()</code> 的参数 <code>700 + 200</code> = <code>900</code>。<code>doIt()</code> 顺序执行了三个步骤，一共用了 <code>300 + 500 + 700 = 1500</code> 毫秒，和 <code>console.time()/console.timeEnd()</code> 计算的结果一致。</p>\n<p>如果用 async/await 来实现呢，会是这样</p>\n<pre><code>async function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is $&#123;result&#125;`);\n    console.timeEnd(&quot;doIt&quot;);\n&#125;\n\ndoIt();</code></pre>\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h3 id=\"2-3-还有更酷的\"><a href=\"#2-3-还有更酷的\" class=\"headerlink\" title=\"2.3. 还有更酷的\"></a>2.3. 还有更酷的</h3><p>现在把业务要求改一下，仍然是三个步骤，但每一个步骤都需要之前每个步骤的结果。</p>\n<pre><code>function step1(n) &#123;\n    console.log(`step1 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\n\nfunction step2(m, n) &#123;\n    console.log(`step2 with $&#123;m&#125; and $&#123;n&#125;`);\n    return takeLongTime(m + n);\n&#125;\n\nfunction step3(k, m, n) &#123;\n    console.log(`step3 with $&#123;k&#125;, $&#123;m&#125; and $&#123;n&#125;`);\n    return takeLongTime(k + m + n);\n&#125;</code></pre>\n<p>这回先用 async/await 来写：</p>\n<pre><code>async function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time1, time2);\n    const result = await step3(time1, time2, time3);\n    console.log(`result is $&#123;result&#125;`);\n    console.timeEnd(&quot;doIt&quot;);\n&#125;\n\ndoIt();\n\n// c:\\var\\test&gt;node --harmony_async_await .\n// step1 with 300\n// step2 with 800 = 300 + 500\n// step3 with 1800 = 300 + 500 + 1000\n// result is 2000\n// doIt: 2907.387ms</code></pre>\n<p>除了觉得执行时间变长了之外，似乎和之前的示例没啥区别啊！别急，认真想想如果把它写成 Promise 方式实现会是什么样子？</p>\n<pre><code>function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    step1(time1)\n        .then(time2 =&gt; &#123;\n            return step2(time1, time2)\n                .then(time3 =&gt; [time1, time2, time3]);\n        &#125;)\n        .then(times =&gt; &#123;\n            const [time1, time2, time3] = times;\n            return step3(time1, time2, time3);\n        &#125;)\n        .then(result =&gt; &#123;\n            console.log(`result is $&#123;result&#125;`);\n            console.timeEnd(&quot;doIt&quot;);\n        &#125;);\n&#125;\n\ndoIt();</code></pre>\n<p>有没有感觉有点复杂的样子？那一堆参数处理，就是 Promise 方案的死穴—— 参数传递太麻烦了，看着就晕！</p>\n<h2 id=\"3-洗洗睡吧\"><a href=\"#3-洗洗睡吧\" class=\"headerlink\" title=\"3. 洗洗睡吧\"></a>3. 洗洗睡吧</h2><p>就目前来说，已经理解 async/await 了吧？但其实还有一些事情没提及——Promise 有可能 reject 啊，怎么处理呢？如果需要并行处理3个步骤，再等待所有结果，又该怎么处理呢？</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/05/async.html\">阮一峰老师已经说过了</a>，我就懒得说了。</p>\n<h2 id=\"4-推荐相关文章\"><a href=\"#4-推荐相关文章\" class=\"headerlink\" title=\"4. 推荐相关文章\"></a>4. 推荐相关文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000021966277\">在微信小程序中使用 async/await</a> 2020-03-10</li>\n<li><a href=\"https://segmentfault.com/a/1190000022349639\">代码审查，异步调用的常见问题剖析</a> 2020-04-12</li>\n<li><a href=\"https://segmentfault.com/a/1190000022315137\">Proxy 封装微信小程序的异步调用</a> 2020-04-9</li>\n<li><a href=\"https://segmentfault.com/a/1190000022467002\">改进异步封装：处理带返回值的异步调用</a> 2020-04-25</li>\n<li><a href=\"https://segmentfault.com/a/1190000007987187\">从地狱到天堂，Node 回调向 async/await 转变</a> 2017-01-02</li>\n<li><a href=\"https://segmentfault.com/a/1190000013337421\">异步编程需要“意识”</a> 2018-02-23</li>\n<li><a href=\"https://segmentfault.com/a/1190000011802045\">从不用 try-catch 实现的 async/await 语法说错误处理</a> 2017-10-31</li>\n</ul>\n<h2 id=\"5-关于转载\"><a href=\"#5-关于转载\" class=\"headerlink\" title=\"5. 关于转载\"></a>5. 关于转载</h2><p>转载自<a href=\"https://segmentfault.com/a/1190000007535316\">思否</a> 作者<a href=\"https://segmentfault.com/u/jamesfancy\">边城</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"理解-JavaScript-的-async-await\"><a href=\"#理解-JavaScript-的-async-await\" class=\"headerlink\" title=\"理解 JavaScript 的 async/await\"></a><a href=\"\">理解 JavaScript 的 async/await</a></h1><p>JavaScript 中的 async/await 是 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction 特性</a> 中的关键字。目前为止，除了 IE 之外，常用浏览器和 Node (v7.6+) 都已经支持该特性。具体支持情况可以在 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction#Browser_compatibility\">这里</a> 查看。</p>\n<hr>\n<p>我第一次看到 async/await 这组关键字并不是在 JavaScript 语言里，而是在 C# 5.0 的语法中。C# 的 async/await 需要在 .NET Framework 4.5 以上的版本中使用，因此我还很悲伤了一阵——为了要兼容 XP 系统，我们开发的软件不能使用高于 4.0 版本的 .NET Framework。</p>\n<p>我之前在<a href=\"https://segmentfault.com/a/1190000003742890\">《闲谈异步调用“扁平”化》</a> 中就谈到了这个问题。无论是在 C# 还是 JavaScript 中，async/await 都是非常棒的特性，它们也都是非常甜的语法糖。C# 的 async/await 实现离不开 <a href=\"https://msdn.microsoft.com/library/dd321424.aspx\">Task 或 Task<Result></a> 类，而 JavaScript 的 async/await 实现，也离不开 <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>。</p>\n<p>现在抛开 C# 和 .NET Framework，专心研究下 JavaScript 的 async/await。</p>\n<h2 id=\"1-async-和-await-在干什么\"><a href=\"#1-async-和-await-在干什么\" class=\"headerlink\" title=\"1. async 和 await 在干什么\"></a>1. async 和 await 在干什么</h2><p>任意一个名称都是有意义的，先从字面意思来理解。async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>\n<p>另外还有一个很有意思的语法规定，await 只能出现在 async 函数中。然后细心的朋友会产生一个疑问，如果 await 只能出现在 async 函数中，那这个 async 函数应该怎么调用？</p>\n<p>如果需要通过 await 来调用一个 async 函数，那这个调用的外面必须得再包一个 async 函数，然后……进入死循环，永无出头之日……</p>\n<p>如果 async 函数不需要 await 来调用，那 async 到底起个啥作用？</p>\n<h3 id=\"1-1-async-起什么作用\"><a href=\"#1-1-async-起什么作用\" class=\"headerlink\" title=\"1.1. async 起什么作用\"></a>1.1. async 起什么作用</h3><p>这个问题的关键在于，async 函数是怎么处理它的返回值的！</p>\n<p>我们当然希望它能直接通过 <code>return</code> 语句返回我们想要的值，但是如果真是这样，似乎就没 await 什么事了。所以，写段代码来试试，看它到底会返回什么：</p>\n<pre><code>async function testAsync() &#123;\n    return &quot;hello async&quot;;\n&#125;\n\nconst result = testAsync();\nconsole.log(result);</code></pre>\n<p>看到输出就恍然大悟了——输出的是一个 Promise 对象。</p>\n<pre><code>c:\\var\\test&gt; node --harmony_async_await .\nPromise &#123; &#39;hello async&#39; &#125;</code></pre>\n<p>所以，async 函数返回的是一个 Promise 对象。从<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/async_function\">文档</a>中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 <code>return</code> 一个直接量，async 会把这个直接量通过 <code>Promise.resolve()</code> 封装成 Promise 对象。</p>\n<blockquote>\n<p>补充知识点 <em>[2020-06-04]</em></p>\n<p><code>Promise.resolve(x)</code> 可以看作是 <code>new Promise(resolve =&gt; resolve(x))</code> 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</p>\n</blockquote>\n<p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，我们当然应该用原来的方式：<code>then()</code> 链来处理这个 Promise 对象，就像这样</p>\n<pre><code>testAsync().then(v =&gt; &#123;\n    console.log(v);    // 输出 hello async\n&#125;);</code></pre>\n<p>现在回过头来想下，如果 async 函数没有返回值，又该如何？很容易想到，它会返回 <code>Promise.resolve(undefined)</code>。</p>\n<p>联想一下 Promise 的特点——无等待，所以在没有 <code>await</code> 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p>\n<p>那么下一个关键点就在于 await 关键字了。</p>\n<h3 id=\"1-2-await-到底在等啥\"><a href=\"#1-2-await-到底在等啥\" class=\"headerlink\" title=\"1.2. await 到底在等啥\"></a>1.2. await 到底在等啥</h3><p>一般来说，都认为 await 是在等待一个 async 函数完成。不过按<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/await\">语法说明</a>，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行</p>\n<pre><code>function getSomething() &#123;\n    return &quot;something&quot;;\n&#125;\n\nasync function testAsync() &#123;\n    return Promise.resolve(&quot;hello async&quot;);\n&#125;\n\nasync function test() &#123;\n    const v1 = await getSomething();\n    const v2 = await testAsync();\n    console.log(v1, v2);\n&#125;\n\ntest();</code></pre>\n<h3 id=\"1-3-await-等到了要等的，然后呢\"><a href=\"#1-3-await-等到了要等的，然后呢\" class=\"headerlink\" title=\"1.3. await 等到了要等的，然后呢\"></a>1.3. await 等到了要等的，然后呢</h3><p>await 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，<code>await</code> 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p>\n<p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</p>\n<p>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p>\n<blockquote>\n<p>看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n</blockquote>\n<h2 id=\"2-async-await-帮我们干了啥\"><a href=\"#2-async-await-帮我们干了啥\" class=\"headerlink\" title=\"2. async/await 帮我们干了啥\"></a>2. async/await 帮我们干了啥</h2><h3 id=\"2-1-作个简单的比较\"><a href=\"#2-1-作个简单的比较\" class=\"headerlink\" title=\"2.1. 作个简单的比较\"></a>2.1. 作个简单的比较</h3><p>上面已经说明了 async 会将其后的函数（函数表达式或 Lambda）的返回值封装成一个 Promise 对象，而 await 会等待这个 Promise 完成，并将其 resolve 的结果返回出来。</p>\n<p>现在举例，用 <code>setTimeout</code> 模拟耗时的异步操作，先来看看不用 async/await 会怎么写</p>\n<pre><code>function takeLongTime() &#123;\n    return new Promise(resolve =&gt; &#123;\n        setTimeout(() =&gt; resolve(&quot;long_time_value&quot;), 1000);\n    &#125;);\n&#125;\n\ntakeLongTime().then(v =&gt; &#123;\n    console.log(&quot;got&quot;, v);\n&#125;);</code></pre>\n<p>如果改用 async/await 呢，会是这样</p>\n<pre><code>function takeLongTime() &#123;\n    return new Promise(resolve =&gt; &#123;\n        setTimeout(() =&gt; resolve(&quot;long_time_value&quot;), 1000);\n    &#125;);\n&#125;\n\nasync function test() &#123;\n    const v = await takeLongTime();\n    console.log(v);\n&#125;\n\ntest();</code></pre>\n<p>眼尖的同学已经发现 <code>takeLongTime()</code> 没有申明为 <code>async</code>。实际上，<code>takeLongTime()</code> 本身就是返回的 Promise 对象，加不加 <code>async</code> 结果都一样，如果没明白，请回过头再去看看上面的“async 起什么作用”。</p>\n<p>又一个疑问产生了，这两段代码，两种方式对异步调用的处理（实际就是对 Promise 对象的处理）差别并不明显，甚至使用 async/await 还需要多写一些代码，那它的优势到底在哪？</p>\n<h3 id=\"2-2-async-await-的优势在于处理-then-链\"><a href=\"#2-2-async-await-的优势在于处理-then-链\" class=\"headerlink\" title=\"2.2. async/await 的优势在于处理 then 链\"></a>2.2. async/await 的优势在于处理 then 链</h3><p>单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</p>\n<p>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。我们仍然用 <code>setTimeout</code> 来模拟异步操作：</p>\n<pre><code>/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) &#123;\n    return new Promise(resolve =&gt; &#123;\n        setTimeout(() =&gt; resolve(n + 200), n);\n    &#125;);\n&#125;\n\nfunction step1(n) &#123;\n    console.log(`step1 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\n\nfunction step2(n) &#123;\n    console.log(`step2 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\n\nfunction step3(n) &#123;\n    console.log(`step3 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;</code></pre>\n<p>现在用 Promise 方式来实现这三个步骤的处理</p>\n<pre><code>function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    step1(time1)\n        .then(time2 =&gt; step2(time2))\n        .then(time3 =&gt; step3(time3))\n        .then(result =&gt; &#123;\n            console.log(`result is $&#123;result&#125;`);\n            console.timeEnd(&quot;doIt&quot;);\n        &#125;);\n&#125;\n\ndoIt();\n\n// c:\\var\\test&gt;node --harmony_async_await .\n// step1 with 300\n// step2 with 500\n// step3 with 700\n// result is 900\n// doIt: 1507.251ms</code></pre>\n<p>输出结果 <code>result</code> 是 <code>step3()</code> 的参数 <code>700 + 200</code> = <code>900</code>。<code>doIt()</code> 顺序执行了三个步骤，一共用了 <code>300 + 500 + 700 = 1500</code> 毫秒，和 <code>console.time()/console.timeEnd()</code> 计算的结果一致。</p>\n<p>如果用 async/await 来实现呢，会是这样</p>\n<pre><code>async function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is $&#123;result&#125;`);\n    console.timeEnd(&quot;doIt&quot;);\n&#125;\n\ndoIt();</code></pre>\n<p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<h3 id=\"2-3-还有更酷的\"><a href=\"#2-3-还有更酷的\" class=\"headerlink\" title=\"2.3. 还有更酷的\"></a>2.3. 还有更酷的</h3><p>现在把业务要求改一下，仍然是三个步骤，但每一个步骤都需要之前每个步骤的结果。</p>\n<pre><code>function step1(n) &#123;\n    console.log(`step1 with $&#123;n&#125;`);\n    return takeLongTime(n);\n&#125;\n\nfunction step2(m, n) &#123;\n    console.log(`step2 with $&#123;m&#125; and $&#123;n&#125;`);\n    return takeLongTime(m + n);\n&#125;\n\nfunction step3(k, m, n) &#123;\n    console.log(`step3 with $&#123;k&#125;, $&#123;m&#125; and $&#123;n&#125;`);\n    return takeLongTime(k + m + n);\n&#125;</code></pre>\n<p>这回先用 async/await 来写：</p>\n<pre><code>async function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time1, time2);\n    const result = await step3(time1, time2, time3);\n    console.log(`result is $&#123;result&#125;`);\n    console.timeEnd(&quot;doIt&quot;);\n&#125;\n\ndoIt();\n\n// c:\\var\\test&gt;node --harmony_async_await .\n// step1 with 300\n// step2 with 800 = 300 + 500\n// step3 with 1800 = 300 + 500 + 1000\n// result is 2000\n// doIt: 2907.387ms</code></pre>\n<p>除了觉得执行时间变长了之外，似乎和之前的示例没啥区别啊！别急，认真想想如果把它写成 Promise 方式实现会是什么样子？</p>\n<pre><code>function doIt() &#123;\n    console.time(&quot;doIt&quot;);\n    const time1 = 300;\n    step1(time1)\n        .then(time2 =&gt; &#123;\n            return step2(time1, time2)\n                .then(time3 =&gt; [time1, time2, time3]);\n        &#125;)\n        .then(times =&gt; &#123;\n            const [time1, time2, time3] = times;\n            return step3(time1, time2, time3);\n        &#125;)\n        .then(result =&gt; &#123;\n            console.log(`result is $&#123;result&#125;`);\n            console.timeEnd(&quot;doIt&quot;);\n        &#125;);\n&#125;\n\ndoIt();</code></pre>\n<p>有没有感觉有点复杂的样子？那一堆参数处理，就是 Promise 方案的死穴—— 参数传递太麻烦了，看着就晕！</p>\n<h2 id=\"3-洗洗睡吧\"><a href=\"#3-洗洗睡吧\" class=\"headerlink\" title=\"3. 洗洗睡吧\"></a>3. 洗洗睡吧</h2><p>就目前来说，已经理解 async/await 了吧？但其实还有一些事情没提及——Promise 有可能 reject 啊，怎么处理呢？如果需要并行处理3个步骤，再等待所有结果，又该怎么处理呢？</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/05/async.html\">阮一峰老师已经说过了</a>，我就懒得说了。</p>\n<h2 id=\"4-推荐相关文章\"><a href=\"#4-推荐相关文章\" class=\"headerlink\" title=\"4. 推荐相关文章\"></a>4. 推荐相关文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000021966277\">在微信小程序中使用 async/await</a> 2020-03-10</li>\n<li><a href=\"https://segmentfault.com/a/1190000022349639\">代码审查，异步调用的常见问题剖析</a> 2020-04-12</li>\n<li><a href=\"https://segmentfault.com/a/1190000022315137\">Proxy 封装微信小程序的异步调用</a> 2020-04-9</li>\n<li><a href=\"https://segmentfault.com/a/1190000022467002\">改进异步封装：处理带返回值的异步调用</a> 2020-04-25</li>\n<li><a href=\"https://segmentfault.com/a/1190000007987187\">从地狱到天堂，Node 回调向 async/await 转变</a> 2017-01-02</li>\n<li><a href=\"https://segmentfault.com/a/1190000013337421\">异步编程需要“意识”</a> 2018-02-23</li>\n<li><a href=\"https://segmentfault.com/a/1190000011802045\">从不用 try-catch 实现的 async/await 语法说错误处理</a> 2017-10-31</li>\n</ul>\n<h2 id=\"5-关于转载\"><a href=\"#5-关于转载\" class=\"headerlink\" title=\"5. 关于转载\"></a>5. 关于转载</h2><p>转载自<a href=\"https://segmentfault.com/a/1190000007535316\">思否</a> 作者<a href=\"https://segmentfault.com/u/jamesfancy\">边城</a></p>\n"},{"title":"这是我的第一篇博客","date":"2020-10-22T05:25:00.000Z","author":"heyXiao","summary":"Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。","_content":"# 这是我的第一篇博客\n\n- **Markdown和扩展Markdown简洁的语法**\n- **代码块高亮**\n- **图片链接和图片上传**\n- ***LaTex*数学公式**\n- **UML序列图和流程图**\n- **离线写博客**\n- **导入导出Markdown文件**\n- **丰富的快捷键**\n\n-------------------\n\n## 快捷键\n\n - 加粗    `Ctrl + B` \n - 斜体    `Ctrl + I` \n - 引用    `Ctrl + Q`\n - 插入链接    `Ctrl + L`\n - 插入代码    `Ctrl + K`\n - 插入图片    `Ctrl + G`\n - 提升标题    `Ctrl + H`\n - 有序列表    `Ctrl + O`\n - 无序列表    `Ctrl + U`\n - 横线    `Ctrl + R`\n - 撤销    `Ctrl + Z`\n - 重做    `Ctrl + Y`\n\n## Markdown及扩展\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\"> [ 维基百科 ]\n\n使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.csdn.net)等，详细语法参考帮助？。\n\n本编辑器支持 **Markdown Extra** , 　扩展了很多好用的功能。具体请参考[Github][2].  \n\n### 表格\n\n**Markdown　Extra**　表格语法：\n\n项目     | 价格\n-------- | ---\nComputer | $1600\nPhone    | $12\nPipe     | $1\n\n可以使用冒号来定义对齐方式：\n\n| 项目      |    价格 | 数量  |\n| :-------- | --------:| :--: |\n| Computer  | 1600 元 |  5   |\n| Phone     |   12 元 |  12  |\n| Pipe      |    1 元 | 234  |\n\n###定义列表\n\n**Markdown　Extra**　定义列表语法：\n项目１\n项目２\n:   定义 A\n:   定义 B\n\n项目３\n:   定义 C\n\n:   定义 D\n\n\t> 定义D内容\n\n### 代码块\n代码块语法遵循标准markdown代码，例如：\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\nclass SomeClass:\n    pass\n>>> message = '''interpreter\n... prompt'''\n```\n\n###脚注\n生成一个脚注[^footnote].\n  [^footnote]: 这里是 **脚注** 的 *内容*.\n  \n### 目录\n用 `[TOC]`来生成目录：\n\n@[toc]\n### 数学公式\n使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com][1].\n\n - 行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。\n - 块级公式：\n\n$$\tx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n更多LaTex语法请参考 [这儿][3].\n\n### UML 图:\n\n可以渲染序列图：\n\n```mermaid\nsequenceDiagram\n张三->>李四: 嘿，小四儿, 写博客了没?\nNote right of 李四: 李四愣了一下，说：\n李四-->>张三: 忙得吐血，哪有时间写。\n```\n\n或者流程图：\n\n```mermaid\nflowchat\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 关于 **序列图** 语法，参考 [这儿][4],\n- 关于 **流程图** 语法，参考 [这儿][5].\n\n## 离线写博客\n\n即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入[write.blog.csdn.net/mdeditor](http://write.blog.csdn.net/mdeditor)即可。**Markdown编辑器**使用浏览器离线存储将内容保存在本地。\n\n用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。\n\n博客发表后，本地缓存将被删除。　\n\n用户可以选择 <i class=\"icon-disk\"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。\n\n> **注意：**虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，**请务必及时发表或者保存到服务器草稿箱**。\n\n##浏览器兼容\n\n 1. 目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。\n 3. IE９以下不支持\n 4. IE９，１０，１１存在以下问题\n    1. 不支持离线功能\n    1. IE9不支持文件导入导出\n    1. IE10不支持拖拽文件导入\n\n---------\n\n[1]: http://math.stackexchange.com/\n[2]: https://github.com/jmcmanus/pagedown-extra \"Pagedown Extra\"\n[3]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n[4]: http://bramp.github.io/js-sequence-diagrams/\n[5]: http://adrai.github.io/flowchart.js/\n[6]: https://github.com/benweet/stackedit\n","source":"_posts/使用CSDN-markdown编辑器.md","raw":"---\ntitle: 这是我的第一篇博客\ndate: 2020-10-22 13:25:00\nauthor: heyXiao\nsummary: Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n# 这是我的第一篇博客\n\n- **Markdown和扩展Markdown简洁的语法**\n- **代码块高亮**\n- **图片链接和图片上传**\n- ***LaTex*数学公式**\n- **UML序列图和流程图**\n- **离线写博客**\n- **导入导出Markdown文件**\n- **丰富的快捷键**\n\n-------------------\n\n## 快捷键\n\n - 加粗    `Ctrl + B` \n - 斜体    `Ctrl + I` \n - 引用    `Ctrl + Q`\n - 插入链接    `Ctrl + L`\n - 插入代码    `Ctrl + K`\n - 插入图片    `Ctrl + G`\n - 提升标题    `Ctrl + H`\n - 有序列表    `Ctrl + O`\n - 无序列表    `Ctrl + U`\n - 横线    `Ctrl + R`\n - 撤销    `Ctrl + Z`\n - 重做    `Ctrl + Y`\n\n## Markdown及扩展\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\"> [ 维基百科 ]\n\n使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.csdn.net)等，详细语法参考帮助？。\n\n本编辑器支持 **Markdown Extra** , 　扩展了很多好用的功能。具体请参考[Github][2].  \n\n### 表格\n\n**Markdown　Extra**　表格语法：\n\n项目     | 价格\n-------- | ---\nComputer | $1600\nPhone    | $12\nPipe     | $1\n\n可以使用冒号来定义对齐方式：\n\n| 项目      |    价格 | 数量  |\n| :-------- | --------:| :--: |\n| Computer  | 1600 元 |  5   |\n| Phone     |   12 元 |  12  |\n| Pipe      |    1 元 | 234  |\n\n###定义列表\n\n**Markdown　Extra**　定义列表语法：\n项目１\n项目２\n:   定义 A\n:   定义 B\n\n项目３\n:   定义 C\n\n:   定义 D\n\n\t> 定义D内容\n\n### 代码块\n代码块语法遵循标准markdown代码，例如：\n```python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\nclass SomeClass:\n    pass\n>>> message = '''interpreter\n... prompt'''\n```\n\n###脚注\n生成一个脚注[^footnote].\n  [^footnote]: 这里是 **脚注** 的 *内容*.\n  \n### 目录\n用 `[TOC]`来生成目录：\n\n@[toc]\n### 数学公式\n使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com][1].\n\n - 行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。\n - 块级公式：\n\n$$\tx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n更多LaTex语法请参考 [这儿][3].\n\n### UML 图:\n\n可以渲染序列图：\n\n```mermaid\nsequenceDiagram\n张三->>李四: 嘿，小四儿, 写博客了没?\nNote right of 李四: 李四愣了一下，说：\n李四-->>张三: 忙得吐血，哪有时间写。\n```\n\n或者流程图：\n\n```mermaid\nflowchat\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n- 关于 **序列图** 语法，参考 [这儿][4],\n- 关于 **流程图** 语法，参考 [这儿][5].\n\n## 离线写博客\n\n即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入[write.blog.csdn.net/mdeditor](http://write.blog.csdn.net/mdeditor)即可。**Markdown编辑器**使用浏览器离线存储将内容保存在本地。\n\n用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。\n\n博客发表后，本地缓存将被删除。　\n\n用户可以选择 <i class=\"icon-disk\"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。\n\n> **注意：**虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，**请务必及时发表或者保存到服务器草稿箱**。\n\n##浏览器兼容\n\n 1. 目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。\n 3. IE９以下不支持\n 4. IE９，１０，１１存在以下问题\n    1. 不支持离线功能\n    1. IE9不支持文件导入导出\n    1. IE10不支持拖拽文件导入\n\n---------\n\n[1]: http://math.stackexchange.com/\n[2]: https://github.com/jmcmanus/pagedown-extra \"Pagedown Extra\"\n[3]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n[4]: http://bramp.github.io/js-sequence-diagrams/\n[5]: http://adrai.github.io/flowchart.js/\n[6]: https://github.com/benweet/stackedit\n","slug":"使用CSDN-markdown编辑器","published":1,"updated":"2020-11-07T07:29:09.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhfjo27l000788r4fwfgccj3","content":"<h1 id=\"这是我的第一篇博客\"><a href=\"#这是我的第一篇博客\" class=\"headerlink\" title=\"这是我的第一篇博客\"></a>这是我的第一篇博客</h1><ul>\n<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>\n<li><strong>代码块高亮</strong></li>\n<li><strong>图片链接和图片上传</strong></li>\n<li><strong><em>LaTex</em>数学公式</strong></li>\n<li><strong>UML序列图和流程图</strong></li>\n<li><strong>离线写博客</strong></li>\n<li><strong>导入导出Markdown文件</strong></li>\n<li><strong>丰富的快捷键</strong></li>\n</ul>\n<hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>加粗    <code>Ctrl + B</code> </li>\n<li>斜体    <code>Ctrl + I</code> </li>\n<li>引用    <code>Ctrl + Q</code></li>\n<li>插入链接    <code>Ctrl + L</code></li>\n<li>插入代码    <code>Ctrl + K</code></li>\n<li>插入图片    <code>Ctrl + G</code></li>\n<li>提升标题    <code>Ctrl + H</code></li>\n<li>有序列表    <code>Ctrl + O</code></li>\n<li>无序列表    <code>Ctrl + U</code></li>\n<li>横线    <code>Ctrl + R</code></li>\n<li>撤销    <code>Ctrl + Z</code></li>\n<li>重做    <code>Ctrl + Y</code></li>\n</ul>\n<h2 id=\"Markdown及扩展\"><a href=\"#Markdown及扩展\" class=\"headerlink\" title=\"Markdown及扩展\"></a>Markdown及扩展</h2><blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\"> [ 维基百科 ]</p>\n</blockquote>\n<p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href=\"http://www.csdn.net/\">链接</a>等，详细语法参考帮助？。</p>\n<p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href=\"https://github.com/jmcmanus/pagedown-extra\" title=\"Pagedown Extra\">Github</a>.  </p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody></table>\n<p>可以使用冒号来定义对齐方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Computer</td>\n<td align=\"right\">1600 元</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"left\">Phone</td>\n<td align=\"right\">12 元</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"left\">Pipe</td>\n<td align=\"right\">1 元</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<p>###定义列表</p>\n<dl><dt><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A</dt><dd>定义 B</dd></dl><dl><dt>项目３</dt><dd>定义 C</dd></dl><p>:   定义 D</p>\n<pre><code>&gt; 定义D内容</code></pre>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：</p>\n<pre class=\" language-python\"><code class=\"language-python\">@requires_authorization\n<span class=\"token keyword\">def</span> <span class=\"token function\">somefunc</span><span class=\"token punctuation\">(</span>param1<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> param2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''A docstring'''</span>\n    <span class=\"token keyword\">if</span> param1 <span class=\"token operator\">></span> param2<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\"># interesting</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">'Greater'</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>param2 <span class=\"token operator\">-</span> param1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> None\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''interpreter\n... prompt'''</span></code></pre>\n<p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p>\n<p>@[toc]</p>\n<h3 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href=\"http://math.stackexchange.com/\">math.stackexchange.com</a>.</p>\n<ul>\n<li>行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。</li>\n<li>块级公式：</li>\n</ul>\n<p>$$    x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<p>更多LaTex语法请参考 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">这儿</a>.</p>\n<h3 id=\"UML-图\"><a href=\"#UML-图\" class=\"headerlink\" title=\"UML 图:\"></a>UML 图:</h3><p>可以渲染序列图：</p>\n<pre class=\" language-mermaid\"><code class=\"language-mermaid\">sequenceDiagram\n张三->>李四: 嘿，小四儿, 写博客了没?\nNote right of 李四: 李四愣了一下，说：\n李四-->>张三: 忙得吐血，哪有时间写。</code></pre>\n<p>或者流程图：</p>\n<pre class=\" language-mermaid\"><code class=\"language-mermaid\">flowchat\nst=>start: 开始\ne=>end: 结束\nop=>operation: 我的操作\ncond=>condition: 确认？\n\nst->op->cond\ncond(yes)->e\ncond(no)->op</code></pre>\n<ul>\n<li>关于 <strong>序列图</strong> 语法，参考 <a href=\"http://bramp.github.io/js-sequence-diagrams/\">这儿</a>,</li>\n<li>关于 <strong>流程图</strong> 语法，参考 <a href=\"http://adrai.github.io/flowchart.js/\">这儿</a>.</li>\n</ul>\n<h2 id=\"离线写博客\"><a href=\"#离线写博客\" class=\"headerlink\" title=\"离线写博客\"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href=\"http://write.blog.csdn.net/mdeditor\">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p>\n<p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p>\n<p>博客发表后，本地缓存将被删除。　</p>\n<p>用户可以选择 <i class=\"icon-disk\"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p>\n<blockquote>\n<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p>\n</blockquote>\n<p>##浏览器兼容</p>\n<ol>\n<li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li>\n<li>IE９以下不支持</li>\n<li>IE９，１０，１１存在以下问题<ol>\n<li>不支持离线功能</li>\n<li>IE9不支持文件导入导出</li>\n<li>IE10不支持拖拽文件导入</li>\n</ol>\n</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这是我的第一篇博客\"><a href=\"#这是我的第一篇博客\" class=\"headerlink\" title=\"这是我的第一篇博客\"></a>这是我的第一篇博客</h1><ul>\n<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>\n<li><strong>代码块高亮</strong></li>\n<li><strong>图片链接和图片上传</strong></li>\n<li><strong><em>LaTex</em>数学公式</strong></li>\n<li><strong>UML序列图和流程图</strong></li>\n<li><strong>离线写博客</strong></li>\n<li><strong>导入导出Markdown文件</strong></li>\n<li><strong>丰富的快捷键</strong></li>\n</ul>\n<hr>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><ul>\n<li>加粗    <code>Ctrl + B</code> </li>\n<li>斜体    <code>Ctrl + I</code> </li>\n<li>引用    <code>Ctrl + Q</code></li>\n<li>插入链接    <code>Ctrl + L</code></li>\n<li>插入代码    <code>Ctrl + K</code></li>\n<li>插入图片    <code>Ctrl + G</code></li>\n<li>提升标题    <code>Ctrl + H</code></li>\n<li>有序列表    <code>Ctrl + O</code></li>\n<li>无序列表    <code>Ctrl + U</code></li>\n<li>横线    <code>Ctrl + R</code></li>\n<li>撤销    <code>Ctrl + Z</code></li>\n<li>重做    <code>Ctrl + Y</code></li>\n</ul>\n<h2 id=\"Markdown及扩展\"><a href=\"#Markdown及扩展\" class=\"headerlink\" title=\"Markdown及扩展\"></a>Markdown及扩展</h2><blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\"> [ 维基百科 ]</p>\n</blockquote>\n<p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href=\"http://www.csdn.net/\">链接</a>等，详细语法参考帮助？。</p>\n<p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href=\"https://github.com/jmcmanus/pagedown-extra\" title=\"Pagedown Extra\">Github</a>.  </p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody></table>\n<p>可以使用冒号来定义对齐方式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Computer</td>\n<td align=\"right\">1600 元</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"left\">Phone</td>\n<td align=\"right\">12 元</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"left\">Pipe</td>\n<td align=\"right\">1 元</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<p>###定义列表</p>\n<dl><dt><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A</dt><dd>定义 B</dd></dl><dl><dt>项目３</dt><dd>定义 C</dd></dl><p>:   定义 D</p>\n<pre><code>&gt; 定义D内容</code></pre>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：</p>\n<pre><code class=\"python\">@requires_authorization\ndef somefunc(param1=&#39;&#39;, param2=0):\n    &#39;&#39;&#39;A docstring&#39;&#39;&#39;\n    if param1 &gt; param2: # interesting\n        print &#39;Greater&#39;\n    return (param2 - param1 + 1) or None\nclass SomeClass:\n    pass\n&gt;&gt;&gt; message = &#39;&#39;&#39;interpreter\n... prompt&#39;&#39;&#39;</code></pre>\n<p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p>\n<p>@[toc]</p>\n<h3 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href=\"http://math.stackexchange.com/\">math.stackexchange.com</a>.</p>\n<ul>\n<li>行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。</li>\n<li>块级公式：</li>\n</ul>\n<p>$$    x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<p>更多LaTex语法请参考 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">这儿</a>.</p>\n<h3 id=\"UML-图\"><a href=\"#UML-图\" class=\"headerlink\" title=\"UML 图:\"></a>UML 图:</h3><p>可以渲染序列图：</p>\n<pre><code class=\"mermaid\">sequenceDiagram\n张三-&gt;&gt;李四: 嘿，小四儿, 写博客了没?\nNote right of 李四: 李四愣了一下，说：\n李四--&gt;&gt;张三: 忙得吐血，哪有时间写。</code></pre>\n<p>或者流程图：</p>\n<pre><code class=\"mermaid\">flowchat\nst=&gt;start: 开始\ne=&gt;end: 结束\nop=&gt;operation: 我的操作\ncond=&gt;condition: 确认？\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op</code></pre>\n<ul>\n<li>关于 <strong>序列图</strong> 语法，参考 <a href=\"http://bramp.github.io/js-sequence-diagrams/\">这儿</a>,</li>\n<li>关于 <strong>流程图</strong> 语法，参考 <a href=\"http://adrai.github.io/flowchart.js/\">这儿</a>.</li>\n</ul>\n<h2 id=\"离线写博客\"><a href=\"#离线写博客\" class=\"headerlink\" title=\"离线写博客\"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href=\"http://write.blog.csdn.net/mdeditor\">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p>\n<p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p>\n<p>博客发表后，本地缓存将被删除。　</p>\n<p>用户可以选择 <i class=\"icon-disk\"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p>\n<blockquote>\n<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p>\n</blockquote>\n<p>##浏览器兼容</p>\n<ol>\n<li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li>\n<li>IE９以下不支持</li>\n<li>IE９，１０，１１存在以下问题<ol>\n<li>不支持离线功能</li>\n<li>IE9不支持文件导入导出</li>\n<li>IE10不支持拖拽文件导入</li>\n</ol>\n</li>\n</ol>\n<hr>\n"},{"title":"这个Blog还有我","date":"2020-11-07T08:27:22.000Z","author":"heyXiao","summary":"主要是个人简介与博客的介绍","_content":"# 这个Blog还有我\n\n-------------------\n## 个人简介\n\n**我** 是一名前端工程师，性别男，97年，老家安徽。母校安徽财贸职业学院，在校专业软工，15年下半年左右开始前端工作，目前在合肥市。\n**兴趣爱好：** 听音乐，排球，羽毛球，骑车\n**Favor：** 周末、月末、发薪日、节日会犒劳一下自己，某天加班久了大概率也会，应该是一种代偿心理，现在打算改为每两周一次；汉堡王及馥郁多汁的肉类，比较喜欢；不是耳机发烧友，只是为了更好的听自己喜欢的歌；天文望远镜，一直想买但是没买，主要是不在家。\n**联系方式：** 手机：18856980690 邮箱：heylheyz@163.com\n\n##### 技能简介\n**技术栈** H5、C3、JS、Vue、uni-app，以上熟练，不敢说精通。React、RN、Flutter、Taro，只是涉猎。\n**PC端** 企业站及后台管理系统，自适应及兼容基本没问题，因为兼容低版本IE很少遇到了，比较炫酷的CSS会费劲。\n**移动端** 现在比较依赖uni-app来开发，之前用京东的Taro做过微信小程序，支付宝小程序也做过。移动端兼容适配熟练。\n**业务能力** 10分给7分，各种情况自己能考虑到绝大部分。框架修改组件开发无压力，但是有现成的就偏向于用轮子。\n\n##### 自我评价\n待人友好，对社交关系比较重视。熟练的前端开发工程师，上手能力强，正在积极突破技术，看薪资补贴及氛围接受长期加班及非双休。\n\n## 博客简介\n**这里是我技术的总结，是我工作经历的记录，是我日常生活的描述。**\n\n## 其他的事情\n很惭愧，接触IT行业5年左右了，才想起来做自己的博客，也没打算说做的多么好，只要还在工作，就会一直记录。\n感谢 [blinkfox](https://github.com/blinkfox)和[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，Ta的文章与Hexo主题帮助我建立了这个博客。\n","source":"_posts/这个Blog还有我.md","raw":"---\ntitle: 这个Blog还有我\ndate: 2020-11-07 16:27:22\nauthor: heyXiao\n# password: 35482c55c9fcbe4ff1b6023476c7acd59c011b9e8870376a45b3416ba8092d3d\nsummary: 主要是个人简介与博客的介绍\ncategories: 致来访者\ntags:\n  - 个人简介\n  - 博客简介\n---\n# 这个Blog还有我\n\n-------------------\n## 个人简介\n\n**我** 是一名前端工程师，性别男，97年，老家安徽。母校安徽财贸职业学院，在校专业软工，15年下半年左右开始前端工作，目前在合肥市。\n**兴趣爱好：** 听音乐，排球，羽毛球，骑车\n**Favor：** 周末、月末、发薪日、节日会犒劳一下自己，某天加班久了大概率也会，应该是一种代偿心理，现在打算改为每两周一次；汉堡王及馥郁多汁的肉类，比较喜欢；不是耳机发烧友，只是为了更好的听自己喜欢的歌；天文望远镜，一直想买但是没买，主要是不在家。\n**联系方式：** 手机：18856980690 邮箱：heylheyz@163.com\n\n##### 技能简介\n**技术栈** H5、C3、JS、Vue、uni-app，以上熟练，不敢说精通。React、RN、Flutter、Taro，只是涉猎。\n**PC端** 企业站及后台管理系统，自适应及兼容基本没问题，因为兼容低版本IE很少遇到了，比较炫酷的CSS会费劲。\n**移动端** 现在比较依赖uni-app来开发，之前用京东的Taro做过微信小程序，支付宝小程序也做过。移动端兼容适配熟练。\n**业务能力** 10分给7分，各种情况自己能考虑到绝大部分。框架修改组件开发无压力，但是有现成的就偏向于用轮子。\n\n##### 自我评价\n待人友好，对社交关系比较重视。熟练的前端开发工程师，上手能力强，正在积极突破技术，看薪资补贴及氛围接受长期加班及非双休。\n\n## 博客简介\n**这里是我技术的总结，是我工作经历的记录，是我日常生活的描述。**\n\n## 其他的事情\n很惭愧，接触IT行业5年左右了，才想起来做自己的博客，也没打算说做的多么好，只要还在工作，就会一直记录。\n感谢 [blinkfox](https://github.com/blinkfox)和[hexo-theme-matery](https://github.com/blinkfox/hexo-theme-matery)，Ta的文章与Hexo主题帮助我建立了这个博客。\n","slug":"这个Blog还有我","published":1,"updated":"2020-11-10T00:43:13.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhfjo27z000o88r4eh80gx4j","content":"<h1 id=\"这个Blog还有我\"><a href=\"#这个Blog还有我\" class=\"headerlink\" title=\"这个Blog还有我\"></a>这个Blog还有我</h1><hr>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p><strong>我</strong> 是一名前端工程师，性别男，97年，老家安徽。母校安徽财贸职业学院，在校专业软工，15年下半年左右开始前端工作，目前在合肥市。<br><strong>兴趣爱好：</strong> 听音乐，排球，羽毛球，骑车<br><strong>Favor：</strong> 周末、月末、发薪日、节日会犒劳一下自己，某天加班久了大概率也会，应该是一种代偿心理，现在打算改为每两周一次；汉堡王及馥郁多汁的肉类，比较喜欢；不是耳机发烧友，只是为了更好的听自己喜欢的歌；天文望远镜，一直想买但是没买，主要是不在家。<br><strong>联系方式：</strong> 手机：18856980690 邮箱：<a href=\"mailto:&#x68;&#x65;&#x79;&#108;&#104;&#x65;&#121;&#x7a;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;\">&#x68;&#x65;&#x79;&#108;&#104;&#x65;&#121;&#x7a;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;</a></p>\n<h5 id=\"技能简介\"><a href=\"#技能简介\" class=\"headerlink\" title=\"技能简介\"></a>技能简介</h5><p><strong>技术栈</strong> H5、C3、JS、Vue、uni-app，以上熟练，不敢说精通。React、RN、Flutter、Taro，只是涉猎。<br><strong>PC端</strong> 企业站及后台管理系统，自适应及兼容基本没问题，因为兼容低版本IE很少遇到了，比较炫酷的CSS会费劲。<br><strong>移动端</strong> 现在比较依赖uni-app来开发，之前用京东的Taro做过微信小程序，支付宝小程序也做过。移动端兼容适配熟练。<br><strong>业务能力</strong> 10分给7分，各种情况自己能考虑到绝大部分。框架修改组件开发无压力，但是有现成的就偏向于用轮子。</p>\n<h5 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h5><p>待人友好，对社交关系比较重视。熟练的前端开发工程师，上手能力强，正在积极突破技术，看薪资补贴及氛围接受长期加班及非双休。</p>\n<h2 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h2><p><strong>这里是我技术的总结，是我工作经历的记录，是我日常生活的描述。</strong></p>\n<h2 id=\"其他的事情\"><a href=\"#其他的事情\" class=\"headerlink\" title=\"其他的事情\"></a>其他的事情</h2><p>很惭愧，接触IT行业5年左右了，才想起来做自己的博客，也没打算说做的多么好，只要还在工作，就会一直记录。<br>感谢 <a href=\"https://github.com/blinkfox\">blinkfox</a>和<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a>，Ta的文章与Hexo主题帮助我建立了这个博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这个Blog还有我\"><a href=\"#这个Blog还有我\" class=\"headerlink\" title=\"这个Blog还有我\"></a>这个Blog还有我</h1><hr>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p><strong>我</strong> 是一名前端工程师，性别男，97年，老家安徽。母校安徽财贸职业学院，在校专业软工，15年下半年左右开始前端工作，目前在合肥市。<br><strong>兴趣爱好：</strong> 听音乐，排球，羽毛球，骑车<br><strong>Favor：</strong> 周末、月末、发薪日、节日会犒劳一下自己，某天加班久了大概率也会，应该是一种代偿心理，现在打算改为每两周一次；汉堡王及馥郁多汁的肉类，比较喜欢；不是耳机发烧友，只是为了更好的听自己喜欢的歌；天文望远镜，一直想买但是没买，主要是不在家。<br><strong>联系方式：</strong> 手机：18856980690 邮箱：<a href=\"mailto:&#x68;&#x65;&#x79;&#108;&#104;&#x65;&#121;&#x7a;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;\">&#x68;&#x65;&#x79;&#108;&#104;&#x65;&#121;&#x7a;&#64;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;</a></p>\n<h5 id=\"技能简介\"><a href=\"#技能简介\" class=\"headerlink\" title=\"技能简介\"></a>技能简介</h5><p><strong>技术栈</strong> H5、C3、JS、Vue、uni-app，以上熟练，不敢说精通。React、RN、Flutter、Taro，只是涉猎。<br><strong>PC端</strong> 企业站及后台管理系统，自适应及兼容基本没问题，因为兼容低版本IE很少遇到了，比较炫酷的CSS会费劲。<br><strong>移动端</strong> 现在比较依赖uni-app来开发，之前用京东的Taro做过微信小程序，支付宝小程序也做过。移动端兼容适配熟练。<br><strong>业务能力</strong> 10分给7分，各种情况自己能考虑到绝大部分。框架修改组件开发无压力，但是有现成的就偏向于用轮子。</p>\n<h5 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h5><p>待人友好，对社交关系比较重视。熟练的前端开发工程师，上手能力强，正在积极突破技术，看薪资补贴及氛围接受长期加班及非双休。</p>\n<h2 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h2><p><strong>这里是我技术的总结，是我工作经历的记录，是我日常生活的描述。</strong></p>\n<h2 id=\"其他的事情\"><a href=\"#其他的事情\" class=\"headerlink\" title=\"其他的事情\"></a>其他的事情</h2><p>很惭愧，接触IT行业5年左右了，才想起来做自己的博客，也没打算说做的多么好，只要还在工作，就会一直记录。<br>感谢 <a href=\"https://github.com/blinkfox\">blinkfox</a>和<a href=\"https://github.com/blinkfox/hexo-theme-matery\">hexo-theme-matery</a>，Ta的文章与Hexo主题帮助我建立了这个博客。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckhfjo27c000188r41zylgd97","category_id":"ckhfjo27j000488r45jgda0vt","_id":"ckhfjo27o000d88r4hvvvh85i"},{"post_id":"ckhfjo27h000388r49jbe80ro","category_id":"ckhfjo27n000a88r49mjvgdua","_id":"ckhfjo27p000g88r48sbf0dvi"},{"post_id":"ckhfjo27l000788r4fwfgccj3","category_id":"ckhfjo27o000e88r41arpf7td","_id":"ckhfjo27p000k88r45yfygy7y"},{"post_id":"ckhfjo27z000o88r4eh80gx4j","category_id":"ckhfjo27z000p88r4b6tzdkty","_id":"ckhfjo280000s88r4206x5kat"}],"PostTag":[{"post_id":"ckhfjo27c000188r41zylgd97","tag_id":"ckhfjo27k000588r4gvbtgoez","_id":"ckhfjo27o000c88r49l4h6hpc"},{"post_id":"ckhfjo27h000388r49jbe80ro","tag_id":"ckhfjo27n000b88r42xd7cpu7","_id":"ckhfjo27p000i88r4dvgd7d1d"},{"post_id":"ckhfjo27h000388r49jbe80ro","tag_id":"ckhfjo27o000f88r474vtbmvj","_id":"ckhfjo27p000j88r441o14o8c"},{"post_id":"ckhfjo27l000788r4fwfgccj3","tag_id":"ckhfjo27p000h88r4cc7sap9j","_id":"ckhfjo27q000m88r47npbd1ox"},{"post_id":"ckhfjo27l000788r4fwfgccj3","tag_id":"ckhfjo27p000l88r473hw5x7r","_id":"ckhfjo27q000n88r42kjwcrvm"},{"post_id":"ckhfjo27z000o88r4eh80gx4j","tag_id":"ckhfjo280000q88r437ho6na9","_id":"ckhfjo280000t88r44o75aq9q"},{"post_id":"ckhfjo27z000o88r4eh80gx4j","tag_id":"ckhfjo280000r88r4hzlk4j5q","_id":"ckhfjo280000u88r45rge3rhm"}],"Tag":[{"name":"Git","_id":"ckhfjo27k000588r4gvbtgoez"},{"name":"JavaScript","_id":"ckhfjo27n000b88r42xd7cpu7"},{"name":"转载","_id":"ckhfjo27o000f88r474vtbmvj"},{"name":"Typora","_id":"ckhfjo27p000h88r4cc7sap9j"},{"name":"Markdown","_id":"ckhfjo27p000l88r473hw5x7r"},{"name":"个人简介","_id":"ckhfjo280000q88r437ho6na9"},{"name":"博客简介","_id":"ckhfjo280000r88r4hzlk4j5q"}]}}